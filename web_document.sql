-- phpMyAdmin SQL Dump
-- version 2.11.4
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Dec 02, 2015 at 04:42 AM
-- Server version: 5.1.57
-- PHP Version: 5.2.17

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";

--
-- Database: `a1037597_test`
--

-- --------------------------------------------------------

--
-- Table structure for table `Web_Document`
--

CREATE TABLE `Web_Document` (
  `DocNum` int(11) NOT NULL AUTO_INCREMENT,
  `DocType` varchar(20) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  `DocTitle` varchar(128) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  `DocDescription` varchar(256) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  `DocContent` text CHARACTER SET utf8 COLLATE utf8_unicode_ci,
  `VisitNum` int(11) DEFAULT NULL,
  `CreUser` varchar(20) COLLATE latin1_general_ci NOT NULL,
  `CreDate` datetime NOT NULL,
  `UpdUser` varchar(20) COLLATE latin1_general_ci DEFAULT NULL,
  `UpdDate` datetime DEFAULT NULL,
  `DBSTS` char(1) COLLATE latin1_general_ci DEFAULT NULL,
  PRIMARY KEY (`DocNum`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 COLLATE=latin1_general_ci AUTO_INCREMENT=37 ;

--
-- Dumping data for table `Web_Document`
--

INSERT INTO `Web_Document` VALUES(1, 'JavaScript', 'JavaScript 物件初探', '因為一條小龍之前都是學 C#、Java 等，規範嚴謹的語言起身的，所以說起使用 JavaScript 這種松散定義的弱型別語言，就有點痛苦，因為它的變數定義實在太彈性了，還不用事先宣告，常常程式碼看到一半，你會搞不清楚，這個變數的型態到底是什麼、使用範圍、他現在的值是多少，這些都會加重後續維護上的成本。', '因為一條小龍之前都是學 C#、Java 等，規範嚴謹的語言起身的，所以說起使用 JavaScript 這種松散定義的弱型別語言，就有點痛苦，因為它的變數定義實在太彈性了，還不用事先宣告，常常程式碼看到一半，你會搞不清楚，這個變數的型態到底是什麼、使用範圍、他現在的值是多少，這些都會加重後續維護上的成本。\r\n\r\n下面會針對JS 關於物件的使用部分做一個初步的探討，讀者看完應該就能對 JS 的物件有個初步的概念，關於 JS 的物件現在大家使用最廣的應該就算是 JSON 了，但是初學者可能用半天還沒發現 JSON 是一個物件，還誤以為是一個陣列，但是說到 JS 的陣列，其實他也是一個物件，所以能像物件一般來操作，只是他擁有陣列特性。\r\n\r\nJS 物件，大概是 JS 所有變數裡面為一需要先宣告才能使用的一種了，目前<a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a> 所知物件的宣告方式 有下面兩種，而陣列也能用物件的方式來操作，所以在這也算一種\r\n\r\n[code lang="js"]\r\n   var arr = [];\r\n   var arr = new Array();\r\n   var obj = {};\r\n   var obj = new Object;\r\n[/code]\r\n\r\n而物件的使用方式，更是千變萬化，而令人頭痛 @@，頭痛的原因是，你要看別人的 code 就會非常痛苦，尤其是有些人喜歡用高深莫測的語法來寫的 code，這些人大概認為寫到別人看不懂，那他就是比較厲害的那個吧....\r\n\r\n但這些都會加深維護成本，如果讀者之前有看一條小龍的文章就知道，<a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a> 是非常強調規範性的，盡量要讓後面的開發人員都維持在一個統一各規範中來開發。\r\n\r\n下面就來看一下，一些常見的物件操作方式\r\n第一種物件初始化的方式是一開始就宣告，物件內容，這個常見的就是在使用 JSON 上了吧，其中讀者要注意的是，物件屬性，只能用字串來定義。\r\nJS 物件比較特別的是，他可以像類似陣列的方式操作物件，如 obj["a"]，所以很多人就真的把它當作陣列來操作了，尤其是 JSON 的操作上，是最常見的。\r\n\r\n[code lang="js"]\r\n    var obj = { &quot;a&quot;: 1, &quot;b&quot;: 2 };\r\n    alert(obj.a + obj.b);\r\n    alert(obj[&quot;a&quot;] + obj[&quot;b&quot;]);\r\n    alert(obj[0] + obj[1]);\r\n[/code]\r\n上述ans 都是 3，但是最後一個是錯的寫法，讀者可以 再想想，如何達到這個目的。\r\n\r\n第二種方式，就是JS 中常見的是後宣告，這是方式是 最 powerful，也是最恐怖的方式，因為後續開發者，在哪突然宣告了一個屬性、函數等，那就像一個不定時炸彈一樣等著爆炸@@\r\n[code lang="js"]\r\n    var obj = new Object;\r\n    obj[0] = &quot;1&quot;;\r\n    obj.t = &quot;2&quot;;\r\n    obj.o.t = &quot;3&quot;;\r\n    obj.show = function () {\r\n        alert(this.t);\r\n        alert(this[&quot;t&quot;]);\r\n        alert(this[0]);\r\n        alert(obj.o.t);\r\n    };\r\n    obj.show();\r\n[/code]\r\n\r\n讀者看到了嗎?這種看似亂起八糟的寫法，全部 all pass，而且讀者注意看，還能發現 JS 可以允許物件裡面在定義物件，真是太可怕了，在多定義幾層下去，寫的人都會搞不清楚 this 是指哪一個了吧 @@\r\n\r\n當然 最可怕的不只這個，一般開發人員使用物件，應該都是先定義物件型別，在去初始化出來使用，定義型別的方式，就是用 JS 最常見的 function，天阿，讀者知道厲害了吧，function 不只是單純定義 函數而已，也可以拿來當作物件型別定義，也可以把自己當成物件傳出去來進行操作...所以一條小龍前面才會說 JS 物件的使用方式，是千變萬化的，實在太自由了。\r\n\r\n下面是一個簡單的宣告物件以及對應的使用範例\r\n[code lang="js"]\r\n    var car1 = new Car(&quot;black&quot;, 2);\r\n    alert(car1.color + &quot;,&quot; + car1.doors);\r\n    function Car(sColor, iDoors) {\r\n        this.color = sColor;\r\n        this.doors = iDoors;\r\n    };\r\n\r\n[/code]\r\n看到了嗎，function 可以直接拿來當物件型別來操作了，而且既使你已經定義物件型別，一但初始化，你也可以在像上述的物件操作方式一樣，動態增加屬性、物件、函數...等，所以說 JS 是非常非常自由的語言。\r\n\r\n當然 動態增加的缺點就是，下次 在初始化時，就不會有這些動態增加的屬性、物件、函數...等了，所以為了解決這個缺點(這是缺點嗎??) JS 有一個方法叫做 prototype ，可以動態增加定義型別，這也是一個非常強、非常恐怖的功能，開發人員可以想到就給你重新定義一下型別，添加一些新功能，所以在定義型別時，要小心點定義哪些是public 哪些是 private 的，才不會讓後面用的人，莫名其妙掛點都不知道為什麼。\r\n\r\n但是有時我們在使用第三方控件，為了增加既有功能，這時 prototype 就是一個很方便且必要的功能了，真是一把雙面刃...\r\n\r\n下面就來看一下 prototype 的基本用法\r\n[code lang="js"]\r\n        Car.prototype.showInfo2 = function () {\r\n            alert(this.color + &quot;,&quot; + this.doors + &quot;,&quot; + this.year);\r\n        };\r\n        var car1 = new Car(&quot;black&quot;, 2);\r\n        car1.year = 1990;\r\n        car1.showInfo2();\r\n        car1.showInfo();\r\n        function Car(sColor, iDoors) {\r\n            this.color = sColor;\r\n            this.doors = iDoors;\r\n            this.showInfo = function () {\r\n                alert(year);\r\n            }\r\n        };\r\n[/code]\r\n\r\n這段 code 中，讀者可注意一下 year 這個變數的使用範圍，僅侷限於外部動態生成的函數才能使用，原型別定義的函數是不能使用的。\r\n\r\n介紹到這，也差不多把 JS 常見的物件操作都介紹完了，雖然<a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a> 文中抱怨很多 JS 的問題，但不可否認目前 JS 是網頁開發中，不可或缺的重要技術，所以各位讀者，還是要用力去學習、了解，然後在使用時，不要圖方便，想到就動態加一下的，要盡量把定義、給值等，都集中在一起，利己利人，如此也才能方便後面的維護。', 25, 'watson', '2013-05-09 16:46:19', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(2, 'JavaScript', 'EasyUI DataGrid 動態新增 Toolbar', 'easyui datagrid 是一個彈性蠻大的元件，但是官方文件有點不足，是比較可惜的一點。下面，一條小龍會介紹一下，如何動態新增 toolbar button。這個技巧讀者可以舉一反三應用在任何想動態新增的部分上。這邊盡量簡化好來介紹其中的關鍵點。', 'easyui datagrid 是一個彈性蠻大的元件，但是官方文件有點不足，是比較可惜的一點。下面，<a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a> 會介紹一下，如何動態新增 toolbar button。這個技巧讀者可以舉一反三應用在任何想動態新增的部分上。這邊盡量簡化好來介紹其中的關鍵點。\r\n\r\n一般寫 JavaScript 應用的程式，實務上 <a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a> 都會希望能盡量把商業邏輯放在server 端來控制，client 端就是變成單純的控件應用。這樣的好處是後面比較好維護，因為後面在維護時，只要專注於 server 端的邏輯的變化就好，而不用 Client Server 兩邊比較來得知要如何改。\r\n另一個好處是，讓後續開發人員只需專注Server 端的開發技巧即可，而不必為了增加一個 button 這種常用到的功能，也要後端開發人員去了解 EasyUI 後才有辦法去開發，如此一來就可以減少很多開發成本。\r\n\r\n一般程式開發中，大家都知道要降低程式間的耦合性，也就是要降低程式間的關聯性，盡量讓各程式獨立來發展，這個道理應用在這，就可以了解Client Server 端切割清楚，也會有助於，後續程式的穩定性。\r\n\r\n下面，來介紹一下 EasyUI 的基本概念，也就是 EasyUI 的元件一定要先初始化，才能應用，而一但初始化，想再去改變它，就只能透過 EasyUI 元件所提供的 Function 來操作，一但沒有對應 Function 可以操作，就只能想辦法在一開始初始化中 就要定義好，以上是我們在操作 EasyUI 的重要觀念。\r\n\r\n要動態化操作前，首先要先知道如何用 靜態網頁來操作，沒問題後，再來想辦法用 後端程式 來產生相對應的 JS，以下就是靜態網頁的操作方式。\r\n[code lang="js"]\r\n    $(function () {\r\n        AddButton(&quot;btnAlert&quot;, &quot;alert test&quot;, &quot;icon-edit&quot;);\r\n        var config = {};\r\n        config.toolbar = toolbar;\r\n        $(''#dg'').datagrid(config);\r\n        loaddata();\r\n    });\r\n    var toolbar = [];\r\n    function AddButton(btnID, caption, icon) {\r\n        if (toolbar.length &gt; 0) {\r\n            toolbar[toolbar.length] = &quot;-&quot;;\r\n        }\r\n        toolbar[toolbar.length] = {\r\n            text: caption,\r\n            iconCls: icon\r\n        };\r\n    }\r\n\r\n    function loaddata() {\r\n        var rawData = { &quot;total&quot;: 28, &quot;rows&quot;: [\r\n            { &quot;productid&quot;: &quot;FI-SW-01&quot;, &quot;unitcost&quot;: 10.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 36.50, &quot;attr1&quot;: &quot;Large&quot;, &quot;itemid&quot;: &quot;EST-1&quot; },\r\n            { &quot;productid&quot;: &quot;K9-DL-01&quot;, &quot;unitcost&quot;: 12.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 18.50, &quot;attr1&quot;: &quot;Spotted Adult Female&quot;, &quot;itemid&quot;: &quot;EST-10&quot; },\r\n            { &quot;productid&quot;: &quot;RP-SN-01&quot;, &quot;unitcost&quot;: 12.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 28.50, &quot;attr1&quot;: &quot;Venomless&quot;, &quot;itemid&quot;: &quot;EST-11&quot; },\r\n            { &quot;productid&quot;: &quot;RP-SN-01&quot;, &quot;unitcost&quot;: 12.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 26.50, &quot;attr1&quot;: &quot;Rattleless&quot;, &quot;itemid&quot;: &quot;EST-12&quot; },\r\n            { &quot;productid&quot;: &quot;RP-LI-02&quot;, &quot;unitcost&quot;: 12.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 35.50, &quot;attr1&quot;: &quot;Green Adult&quot;, &quot;itemid&quot;: &quot;EST-13&quot; },\r\n            { &quot;productid&quot;: &quot;FL-DSH-01&quot;, &quot;unitcost&quot;: 12.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 158.50, &quot;attr1&quot;: &quot;Tailless&quot;, &quot;itemid&quot;: &quot;EST-14&quot; },\r\n            { &quot;productid&quot;: &quot;FL-DSH-01&quot;, &quot;unitcost&quot;: 12.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 83.50, &quot;attr1&quot;: &quot;With tail&quot;, &quot;itemid&quot;: &quot;EST-15&quot; },\r\n            { &quot;productid&quot;: &quot;FL-DLH-02&quot;, &quot;unitcost&quot;: 12.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 63.50, &quot;attr1&quot;: &quot;Adult Female&quot;, &quot;itemid&quot;: &quot;EST-16&quot; },\r\n            { &quot;productid&quot;: &quot;FL-DLH-02&quot;, &quot;unitcost&quot;: 12.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 89.50, &quot;attr1&quot;: &quot;Adult Male&quot;, &quot;itemid&quot;: &quot;EST-17&quot; },\r\n            { &quot;productid&quot;: &quot;AV-CB-01&quot;, &quot;unitcost&quot;: 92.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 63.50, &quot;attr1&quot;: &quot;Adult Male&quot;, &quot;itemid&quot;: &quot;EST-18&quot; }\r\n        ]\r\n        };\r\n        $(''#dg'').datagrid(''loadData'', rawData);\r\n    }\r\n\r\n &lt;table id=&quot;dg&quot; style=&quot;width:700px;height:auto&quot;\r\n     title=&quot;DataGrid&quot; iconCls=&quot;icon-edit&quot; singleSelect=&quot;true&quot;&gt;\r\n    &lt;thead&gt;\r\n     &lt;tr&gt;\r\n        &lt;th field=&quot;itemid&quot; width=&quot;80&quot;&gt;Item ID&lt;/th&gt;\r\n        &lt;th field=&quot;productid&quot; width=&quot;100&quot;&gt;Product&lt;/th&gt;\r\n        &lt;th field=&quot;listprice&quot; width=&quot;80&quot; align=&quot;right&quot; editor=&quot;{type:''numberbox'',options:{precision:1}}&quot;&gt;List Price&lt;/th&gt;\r\n        &lt;th field=&quot;unitcost&quot; width=&quot;80&quot; align=&quot;right&quot; editor=&quot;numberbox&quot;&gt;Unit Cost&lt;/th&gt;\r\n       &lt;th field=&quot;attr1&quot; width=&quot;250&quot; editor=&quot;text&quot;&gt;Attribute&lt;/th&gt;\r\n        &lt;th field=&quot;status&quot; width=&quot;60&quot; align=&quot;center&quot; editor=&quot;{type:''checkbox'',options:{on:''P'',off:''''}}&quot;&gt;Status&lt;/th&gt;\r\n     &lt;/tr&gt;\r\n   &lt;/thead&gt;\r\n  &lt;/table&gt;\r\n[/code]\r\n\r\n上述靜態網頁，這就是<a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a> 為了做動態產生 button，做的一個概念網頁，先把你可以想像的操作用靜態網頁來實驗，實驗成功在用後端來產生。該靜態網頁，重要的點就在於 AddButton 這個 Function ，如此實驗即可得知，後面用後端程式只要產生呼叫 AddButton 這個 function 就能動態產生 button 了。\r\n\r\n所以讀者了解上述程式，就可以 接著來看下面與 ASP.NET 結合後的一個概念程式\r\n[code lang="js"]\r\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\r\n\r\n&lt;script language=&quot;C#&quot; runat=server&gt;\r\n    public void Page_Init(object sender, System.EventArgs e)\r\n    {\r\n        string CusButton = &quot;AddButton(''btnAlert'', ''alert test'', ''icon-edit'');&quot;;\r\n        char vbCrLf = ''\\n'';\r\n        string s = @&quot;/&quot;;\r\n        Response.Write(&quot;&lt;script type=''text/javascript''&gt;&quot;);\r\n        Response.Write(&quot;function onBeforeInit() {&quot; + CusButton + &quot;}&quot;);\r\n        Response.Write(&quot;&lt;&quot; + s + &quot;script&gt;&quot; + vbCrLf);\r\n    }\r\n&lt;/script&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\r\n&lt;/head&gt;\r\n &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./JS/EasyUI/themes/default/easyui.css&quot;&gt;\r\n  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./JS/EasyUI/themes/icon.css&quot;&gt;\r\n\r\n  &lt;script type=&quot;text/javascript&quot; src=&quot;./JS/jquery18min.js&quot;&gt;&lt;/script&gt;\r\n  &lt;script type=&quot;text/javascript&quot; src=&quot;./JS/EasyUI/jquery.easyui.min.js&quot;&gt;&lt;/script&gt;\r\n &lt;script type=&quot;text/javascript&quot; src=&quot;./JS/EasyUI/easyui-lang-zh_TW.js&quot;&gt;&lt;/script&gt;\r\n\r\n    &lt;script type=&quot;text/javascript&quot; src=&quot;./JS/dhtmlx/dhtmlxcommon.js&quot;&gt;&lt;/script&gt;\r\n &lt;script type=&quot;text/javascript&quot; src=&quot;./JS/fg.menu.js&quot;&gt;&lt;/script&gt;\r\n\r\n  &lt;link type=&quot;text/css&quot; href=&quot;./css/fg.menu.css&quot; media=&quot;screen&quot; rel=&quot;stylesheet&quot; /&gt;\r\n &lt;link type=&quot;text/css&quot; href=&quot;./css/theme/ui.all.css&quot; media=&quot;screen&quot; rel=&quot;stylesheet&quot; /&gt;\r\n\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n    $(function () {\r\n        if (typeof (onBeforeInit) == ''function'') {\r\n            onBeforeInit();\r\n        }\r\n        var config = {};\r\n        config.toolbar = toolbar;\r\n        $(''#dg'').datagrid(config);\r\n        loaddata();\r\n    });\r\n    var toolbar = [];\r\n    function AddButton(btnID, caption, icon) {\r\n        if (toolbar.length &gt; 0) {\r\n            toolbar[toolbar.length] = &quot;-&quot;;\r\n        }\r\n        toolbar[toolbar.length] = {\r\n            text: caption,\r\n            iconCls: icon\r\n        };\r\n    }\r\n\r\n    function loaddata() {\r\n        var rawData = { &quot;total&quot;: 28, &quot;rows&quot;: [\r\n         { &quot;productid&quot;: &quot;FI-SW-01&quot;, &quot;unitcost&quot;: 10.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 36.50, &quot;attr1&quot;: &quot;Large&quot;, &quot;itemid&quot;: &quot;EST-1&quot; },\r\n         { &quot;productid&quot;: &quot;K9-DL-01&quot;, &quot;unitcost&quot;: 12.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 18.50, &quot;attr1&quot;: &quot;Spotted Adult Female&quot;, &quot;itemid&quot;: &quot;EST-10&quot; },\r\n         { &quot;productid&quot;: &quot;RP-SN-01&quot;, &quot;unitcost&quot;: 12.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 28.50, &quot;attr1&quot;: &quot;Venomless&quot;, &quot;itemid&quot;: &quot;EST-11&quot; },\r\n          { &quot;productid&quot;: &quot;RP-SN-01&quot;, &quot;unitcost&quot;: 12.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 26.50, &quot;attr1&quot;: &quot;Rattleless&quot;, &quot;itemid&quot;: &quot;EST-12&quot; },\r\n         { &quot;productid&quot;: &quot;RP-LI-02&quot;, &quot;unitcost&quot;: 12.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 35.50, &quot;attr1&quot;: &quot;Green Adult&quot;, &quot;itemid&quot;: &quot;EST-13&quot; },\r\n          { &quot;productid&quot;: &quot;FL-DSH-01&quot;, &quot;unitcost&quot;: 12.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 158.50, &quot;attr1&quot;: &quot;Tailless&quot;, &quot;itemid&quot;: &quot;EST-14&quot; },\r\n         { &quot;productid&quot;: &quot;FL-DSH-01&quot;, &quot;unitcost&quot;: 12.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 83.50, &quot;attr1&quot;: &quot;With tail&quot;, &quot;itemid&quot;: &quot;EST-15&quot; },\r\n         { &quot;productid&quot;: &quot;FL-DLH-02&quot;, &quot;unitcost&quot;: 12.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 63.50, &quot;attr1&quot;: &quot;Adult Female&quot;, &quot;itemid&quot;: &quot;EST-16&quot; },\r\n          { &quot;productid&quot;: &quot;FL-DLH-02&quot;, &quot;unitcost&quot;: 12.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 89.50, &quot;attr1&quot;: &quot;Adult Male&quot;, &quot;itemid&quot;: &quot;EST-17&quot; },\r\n          { &quot;productid&quot;: &quot;AV-CB-01&quot;, &quot;unitcost&quot;: 92.00, &quot;status&quot;: &quot;P&quot;, &quot;listprice&quot;: 63.50, &quot;attr1&quot;: &quot;Adult Male&quot;, &quot;itemid&quot;: &quot;EST-18&quot; }\r\n        ]\r\n        };\r\n        $(''#dg'').datagrid(''loadData'', rawData);\r\n    }\r\n&lt;/script&gt;\r\n&lt;body&gt;\r\n   &lt;form id=&quot;Form1&quot; runat=&quot;server&quot;&gt;\r\n \r\n      &lt;table id=&quot;dg&quot; style=&quot;width:700px;height:auto&quot;\r\n         title=&quot;DataGrid&quot; iconCls=&quot;icon-edit&quot; singleSelect=&quot;true&quot;&gt;\r\n        &lt;thead&gt;\r\n         &lt;tr&gt;\r\n            &lt;th field=&quot;itemid&quot; width=&quot;80&quot;&gt;Item ID&lt;/th&gt;\r\n            &lt;th field=&quot;productid&quot; width=&quot;100&quot;&gt;Product&lt;/th&gt;\r\n            &lt;th field=&quot;listprice&quot; width=&quot;80&quot; align=&quot;right&quot; editor=&quot;{type:''numberbox'',options:{precision:1}}&quot;&gt;List Price&lt;/th&gt;\r\n            &lt;th field=&quot;unitcost&quot; width=&quot;80&quot; align=&quot;right&quot; editor=&quot;numberbox&quot;&gt;Unit Cost&lt;/th&gt;\r\n           &lt;th field=&quot;attr1&quot; width=&quot;250&quot; editor=&quot;text&quot;&gt;Attribute&lt;/th&gt;\r\n            &lt;th field=&quot;status&quot; width=&quot;60&quot; align=&quot;center&quot; editor=&quot;{type:''checkbox'',options:{on:''P'',off:''''}}&quot;&gt;Status&lt;/th&gt;\r\n         &lt;/tr&gt;\r\n       &lt;/thead&gt;\r\n      &lt;/table&gt;\r\n   &lt;/form&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n[/code]\r\n\r\n這個程式主要應用了上一篇 <a href="http://o4u.tw/WebDoc.php?DocNum=3" target="_blank">如何用 javascript 動態呼叫函數</a> 的技巧，在 DataGrid init 前去呼叫 onBeforeInit 這個 function，這個就是一條小龍在前端框架中，為後端程式預留彈性的空間，當然後續讀者在應用時，可以將這些init 分得更細，讓後端程式有更明確的方式來呼叫。<a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a> 在這邊只是介紹其中的概念，所以會比較粗略一點。', 6, 'watson', '2013-05-08 14:55:45', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(3, 'JavaScript', '如何用 JavaScript 動態呼叫函數', '近來的使用者，越來越強調 UI 介面的互動，漸漸原本對一條小龍來說只是配角的 JavaScript (以下簡稱 JS) 變成的主角，占了很大一塊的用途。', '近來的使用者，越來越強調 UI 介面的互動，漸漸原本對一條小龍來說只是配角的 JavaScript (以下簡稱 JS) 變成的主角，占了很大一塊的用途。\r\n\r\n像是最近很熱門的 ASP.NET 的 MVC 裡面就直接Include JQuery 可見一般。\r\nMVC 用了一陣子，一條小龍甚至感覺 MVC 中的 Controller 根本就是 JS 在控制的，這樣怎麼把 UI 工作獨立，切給美工用，感覺也是蠻大的疑問。\r\n看來後面的美工，只會繪圖、拉畫面是不行的，一定要會 JS、Flash 等等前端控制語言，才會吃香。\r\n\r\n這邊，一條小龍介紹一下，如何用 JavaScript 動態呼叫函數，這個時候需要先介紹一下 前提，這樣讀者才能了解，下面的技術能應用在哪裏。\r\n一般會使用到 動態呼叫，基本上都是 後端動態產生 JS的程式碼，在由前端的 JS 框架，來呼叫使用。\r\n會需要這樣做的用途，不外乎，動態設定 UI 的欄位、樣式、資料 等等，另外一種可能，就是保留 JS 框架的擴充性，讓後面的開發人員，可以根據每隻程式的特性，在額外編寫代碼來擴充原有JS 框架的功能。\r\n\r\n下面 就來介紹一下，動態呼叫函數 目前就一條小龍所知應該有下面 兩種方式\r\n[code lang="js"]\r\n    function myAlert(value) {\r\n        document.write(&quot;myAlert - &quot; + value + &quot;&lt;br&gt;&quot;);\r\n    }\r\n    $(function () {\r\n        eval(&quot;myAlert&quot;)(&quot;test&quot;);\r\n        window[&quot;myAlert&quot;](&quot;test&quot;);\r\n    }\r\n[/code]\r\n\r\n一般來說，比較正規還是要使用 window 這個object 來查詢 function 是否存在，用 eval 彈性太大比較有風險。\r\n而且直接照上述來實作，會有蠻大風險，一但被呼叫的函數不存在，整個畫面就會出錯，所以 在使用上，需再加上判斷式，從這角度這時eval 就無法使用了，因為使用 eval 就是要產生 function 這個 object 了，而 window 只是查詢有無 object，所以當 function 不存在，eval 就會直接報錯了，這樣 讀者應該比較能了解其中差異。\r\n\r\n範例程式如下\r\n[code lang="js"]\r\n    function myAlert(value) {\r\n        document.write(&quot;myAlert - &quot; + value + &quot;&lt;br&gt;&quot;);\r\n    }\r\n    $(function () {\r\n        var fnName = &quot;myAlert&quot;;\r\n        var fn = window[fnName];\r\n        if (typeof fn == &quot;function&quot;) {\r\n            fn.apply(window, [&quot;window - test&quot;]);\r\n        }\r\n    }\r\n[/code]\r\n\r\n最後，是我自己又另外想出的一種方式，如下\r\n[code lang="js"]\r\n    function myAlert(value) {\r\n        document.write(&quot;myAlert - &quot; + value + &quot;&lt;br&gt;&quot;);\r\n    }\r\n    $(function () {\r\n  if (typeof (myAlert) == ''function'') {\r\n   myAlert(&quot;typeof - test&quot;);\r\n }\r\n    }\r\n[/code]\r\n\r\n雖然這種方式會犧牲一些彈性，但相反卻可以用這種方式，來限制後續開發人員的命名原則，例如像是框架中的 Init() Load() 等等，皆可用如此方式則可以將使用方式固定下來，不至於發散出去，也方便後續的維護成本。', 8, 'watson', '2013-05-02 16:20:21', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(4, 'normal', '程序員，請debug！', '作者：Vamei 出處：http://www.cnblogs.com/vamei 歡迎轉載，也請保留這段聲明。謝謝！ 偶然讀到園子中的「讓我頭頂發涼的軟件質量小故事」，對其中的軟件缺陷引發的輻射事故很好奇，可惜作者一只遊泳的魚對事故的描述不很詳細。好奇心驅動，做了一些深入的調查。中文報道方面只找到一篇極為簡略的人民網簡訊。但隨後讀到的國際原子能機構的詳細報告深深的震撼了我。', '作者：Vamei 出處：http://www.cnblogs.com/vamei 歡迎轉載，也請保留這段聲明。謝謝！\r\n偶然讀到園子中的「讓我頭頂發涼的軟件質量小故事」，對其中的軟件缺陷引發的輻射事故很好奇，可惜作者一只遊泳的魚對事故的描述不很詳細。好奇心驅動，做了一些深入的調查。中文報道方面只找到一篇極為簡略的人民網簡訊。但隨後讀到的國際原子能機構的詳細報告深深的震撼了我。\r\n\r\n事故發生2000年8月到2001年3月之間，在巴拿馬(Panama)的國家癌症中心(ION，Instituto Oncologico Nacional)，由於人為原因，軟件錯誤計算了放射治療中的輻射量，最終造成28位病人接受了過量的伽瑪輻射，其中17病人在經曆了數周的輻射後遺症折磨後死亡，剩下的11人都受到嚴重輻射傷害。相關的醫務人員被控謀殺，而生產放療系統以及相關軟件的美國公司(Multidata Systems International Corporation)。該事件曾引起計算機界的廣泛關注，在Wikipedia的軟件bug(Software Bug)詞條中，這個事故被引用作為第一個例證，說明Software Bug可能造成的危害。\r\n\r\n由於輻射物質本身的危險性，所以各國對輻射物管制極為嚴格。曆史上的輻射事件也相當有限。巴拿馬輻射事件發生於2000年，當時的放療控制軟件(TPS, treatment planning system)早已面世多年，為什麼還會發生這樣的事故呢？\r\n\r\n先簡單了解一下放療。高能輻射，比如伽瑪射線，可以殺死人體細胞(無論是健康的還是癌變的細胞)。放療就是利用高能輻射線照射並殺死癌細胞，高的輻射量(radiation dose)可以更徹底的殺死癌細胞，防止癌細胞的轉移。但是，過高的輻射又會傷害到人體的健康細胞。同時，放療中會使用保護塊(shielding block)來保護健康部位。這些保護塊是用能夠吸收輻射的材料制作成的，比如鉛制作成的，我們可以把它理解為制作成特殊形狀的"遮光板"。醫生在進行放療之前，必須進行模擬和計算，以確認病人接收放療的姿勢，輻射量(radiation dose)，以及保護塊(shielding block)的形狀和位置，以便讓放療達到最好的效果。這些計算和模擬都相當的複雜，細微到要考慮到皮膚的反射。所以放療計劃通常需要一個團隊的人來合作制定。隨著計算機的發展和成熟，這些過程都逐漸由計算機接管，並形成了TPS系統。\r\n\r\n巴拿馬輻射事故的問題出現在向計算機輸入保護塊數據的過程。如下圖所示，方形框代表伽瑪射線照到病人皮膚上的區域。醫生在方框內放上保護塊(比如鉛板，灰色區域)，以便保護健康組織。為了達到最好的效果，計算機需要知道保護塊的大小和形狀，以便能計算出最優的輻射量。定性的說，當<strong>保護塊</strong>較大時，更多的輻射會被吸收，也就可以用<strong>更大的輻射量</strong>對病人進行放療。ION使用的TPS系統<strong>最多四個保護塊</strong>的坐標：\r\n[caption id="attachment_163" align="aligncenter" width="462"]<a href="http://o4u.tw/blogImgs/debug01.png"><img src="http://o4u.tw/blogImgs/debug01.png" alt="" title="四個三角形" width="462" height="338" class="size-full wp-image-163" /></a> 四個三角形[/caption]\r\n圖中的四個灰色三角形為保護塊位置，而被截剩下的方形中央是輻射區域。\r\n\r\n\r\n在事故之前幾個月，醫生希望使用多達5個保護塊，以便能更好的保護重要器官。但TPS系統只允許輸入4個保護塊的坐標。一開始的解決方法是直接使用第五個保護塊，而不將這個保護塊納入到計算中。所以計算出並使用的輻射量比實際的最優解要小，所以這是一種安全的做法，但醫生不滿意系統的誤差，他們希望使用「最優」的輻射量。為此，醫院的技術人員「創造性」的發明了新的輸入方法：\r\n\r\n[caption id="attachment_165" align="aligncenter" width="358"]<a href="http://o4u.tw/blogImgs/debug03.png"><img src="http://o4u.tw/blogImgs/debug03.png" alt="" title="debug03" width="358" height="322" class="size-full wp-image-165" /></a> 致命方法 4個三角形[/caption]\r\n也就是先走完內圈的坐標，再接著走外圈的坐標，最終回到起點。醫院的技術人員人為，這樣作出的一個保護塊形狀和輸入四個保護塊的形狀相同。依據上面的「方法」，5個保護塊可以以下圖方式輸入(實際上，你可以構造出更多的保護塊)。\r\n[caption id="attachment_166" align="aligncenter" width="335"]<a href="http://o4u.tw/blogImgs/debug04.png"><img src="http://o4u.tw/blogImgs/debug04.png" alt="" title="debug04" width="335" height="293" class="size-full wp-image-166" /></a> 致命方法 4個三角形+1個長方形[/caption]\r\n技術人員很為自己的創造性開心，而醫生則高興的接受了這種看上去很「優雅」的輸入方式。一拍即合之下，醫院的所有放療都采用了新式的輸入方法 (即使是不需要五個保護塊的病人)。從2000年8月到2001年3月間的放療病人，醫院都采取了這樣的輸入，直到醫生終於發現患者實際上接受了致命的放射量。事實上，使用上述的輸入方法算出的輻射量，會大大超過真正的輻射量。鍵盤成為了死神的鐮刀。\r\n\r\n國際原子能機構(IAEA)對事件作出了調查，方法很簡單，就是用不同的輸入方法來做數值實驗，對比計算出的的輻射量。事後發現，還是有幸運兒避過一難。按照上述方法輸入一整個保護塊的坐標的時候，如果內圈和外圈反向，則計算的輻射量是正確的。\r\n[caption id="attachment_167" align="aligncenter" width="370"]<a href="http://o4u.tw/blogImgs/debug05.png"><img src="http://o4u.tw/blogImgs/debug05.png" alt="" title="debug05" width="370" height="330" class="size-full wp-image-167" /></a> 幸運方法 反向內外圈[/caption]\r\n\r\n調查進一步發現，使用內外圈同向的輸入方式，保護塊的大小和形狀對最終的輻射量幾乎沒有影響。比如下圖的情況。理論上一個很小的在角上的保護塊，與沒有保護塊的情況相比，結果應該相似。但實驗結果顯示，這樣算出的輻射量與圖二、三相似。\r\n\r\n\r\n到現在為止，我們已經可以大致可以勾勒出軟件出現的問題了。當內外圈同向的時候，無論是圖三、四還是圖六，路徑會沿著整個方形閉合，所以計算機認為整個方形都是保護塊，因此肆無忌憚的增加輻射量。而內外圈反向，如圖五的情況，路徑不會沿著方形閉合，所以不會出現類似錯誤。以上結論是我自己的推斷，而國際原子能機構中的結論只是說內外圈同向的輸入成為一個保護塊的方式會帶來錯誤，並沒有公布軟件的內部構造。\r\n\r\n\r\n國際原子能機構的數值實驗方法並不複雜，醫院的技術人員完全可以想到並嘗試。一個可能是醫院的技術人員很懶惰，但事實上，技術人員是在改進原有的輸入方法，如果真的懶惰，大可以不嘗試這樣的「創新」。另一個可能是技術人員的通病，就是喜歡創新創造，不喜歡測試。可以想象，醫生當時一定問過技術人員可行性，而技術人員正沉浸在自己創造的「喜悅」中，所以滿嘴的自信。另一方面，技術人員往往被廉價的計算機成本「溺愛」，以至於認為任何bug都可以用錯誤驅動的方法修正。只是這一次，對象不是可以重啟的進程，而是真實的生命。\r\n\r\n\r\n放療系統的軟件設計有明顯的缺陷，理想的軟件應該禁止不合法的輸入方式。固然，在軟件設計過程中，設計人員無法預知所有可能出現的情況，更難以預知「奇葩」的使用人員，但好的軟件設計應該限制軟件的自由度，並強制進行一些合法性檢查。顯然，Multidata公司並沒有做到這一點。但值得欣慰的是，該系統的手冊中明確建議使用人員進行數值實驗或者手算以核實，從而以軟性的方式預防可能的錯誤。而相同的系統在美國已經被廣泛使用，而並沒有出現事故 ，當然也沒有創新的輸入方法 (人為失誤造成的醫療事故會是重罪，所以醫生和操作人員都有嚴格的流程)。在法院判詞中特別提到這一點，認為醫院的醫生和技術人員應該為此次事故負主要責任(具有諷刺意味的是，醫院的負責人由於「背景」深厚，並沒有受到懲罰)。此後，開發公司對老的系統發布了補丁。\r\n作者：Vamei 出處：http://www.cnblogs.com/vamei 歡迎轉載，也請保留這段聲明。謝謝！', 3, 'watson', '2012-11-09 07:51:26', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(5, 'PHP', 'PHP – EasyUI DataGrid 資料存取標準化', '延續上篇 PHP – EasyUI DataGrid 資料存的方式 ，本篇將上篇其中資料存取的 dal_user.php 予以標準化，藉由標準化的 dal 才能將知識傳承下去並可將程式撰寫的方式標準化下來。', '延續上篇 <a href="http://o4u.tw/WebDoc.php?DocNum=6" title="PHP – EasyUI DataGrid 資料存的方式" target="_blank">PHP – EasyUI DataGrid 資料存的方式</a> ，本篇將上篇其中資料存取的 dal_user.php 予以標準化，藉由標準化的 dal 才能將知識傳承下去並可將程式撰寫的方式標準化下來。\r\n\r\n一般我們要將程式撰寫的方式標準化，都會撰寫程式撰寫規範文件的方式，來告訴開發人員要如何來撰寫程式。\r\n\r\n接下來，要來定義 DAL 的 interface，也就是設定 DAL 標準該有的介面有哪些（有關本文所講述 DAL 的概念，讀者 可參閱 <a href="http://o4u.tw/WebDoc.php?DocNum=8" title="PHP – 架構設計 Data Access Layer 篇" target="_blank">PHP – 架構設計 Data Access Layer 篇</a>，看過以後會更容易了解本文所說的概念），介面說明如下。\r\n\r\n首先，要能實現之前在 <a href="http://o4u.tw/WebDoc.php?DocNum=6" title="PHP – EasyUI DataGrid 資料存的方式" target="_blank">PHP – EasyUI DataGrid 資料存的方式</a> 中 type 所定義的四個動作\r\nadd 新增\r\nmod 修改\r\ndel 刪除\r\ndata 取得資料\r\n\r\n這些 都要能有對應的資料處理介面，而這四個動作，也都跟業務邏輯沒有關聯，所以算是很單純的資料存取，很容易就能寫出，標準化介面如下所示：\r\n\r\nIDAL.php\r\n[php collapse="true"]\r\n&lt;?php\r\n\r\n/**\r\n * @file IDAL.php\r\n  * @brief 設定 DAL 標準該有的介面\r\n * @author watson\r\n  * @version 1.0\r\n  * @date 2012-10-05\r\n */\r\ninterface IDAL\r\n{\r\n    /**\r\n     * @brief 設定要操作的資料庫\r\n      *\r\n     * @param $id  要操作的資料庫\r\n     *\r\n     * @return 無回傳值\r\n     */\r\n    public function setDB($fdb);\r\n    \r\n    /**\r\n      * @brief 藉由table 的唯一主 key 來刪除特定資料\r\n     *\r\n     * @param $id  要刪除資料的 key 值\r\n      *\r\n     * @return 成功回傳 ''true'', 失敗回傳 錯誤信息\r\n     */\r\n    public function delete($id);\r\n    \r\n    /**\r\n      * @brief 更新資料，資料從 $_REQUEST 取得，索引名稱需與 資料庫 table 的欄位名稱一致\r\n     *\r\n     * @return 成功回傳 ''true'', 失敗回傳 錯誤信息\r\n     */\r\n    public function update();\r\n    \r\n    /**\r\n     * @brief 新增資料，資料從 $_REQUEST 取得，索引名稱需與 資料庫 table 的欄位名稱一致\r\n     *\r\n     * @return 成功回傳 ''true'', 失敗回傳 錯誤信息\r\n     */\r\n    public function insert();\r\n    \r\n    /**\r\n     * @brief 取得目前資料的總筆數\r\n     *\r\n     * @return 回傳資料的總筆數\r\n     */\r\n    public function getTotalCount();\r\n    \r\n    /**\r\n      * @brief 藉由查詢條件 criValues 來取得資料\r\n     *\r\n     * @param $criValues 該網頁資料處理對應的 DAL\r\n      *\r\n     * @return 回傳資料集陣列\r\n     */\r\n    public function getData($criValues);\r\n}\r\n\r\n?&gt;\r\n[/php]\r\n\r\n接下來，當然就是 要對上面定義的介面來實現 各個 table 對應的 DAL 來處理資料。\r\n這部分的實現，並不複雜，但跟技術比較有關西，為了避免偏離原先要講架購的主題，還請讀者自行去實做，只要能實現上述界面所要功能就可以了。\r\n\r\nDAL 這部分用好後，在來就是思考，如何來應用在 UI 層了，這部分需要思考幾個問題，第一，是希望程式的檔案數要能減少，最好是一支程式就能完成。\r\n第二，UI 層 牽涉到 DAL 的呼叫，也就是 MVC 中的控制部分，也要能標準化起來，如此後面每一支系統程式，就不用每一支都要來去控制 DAL 的呼叫，盡量把會重複使用的控制跟操作的方法，封裝起來，藉此簡化，後面應用時的複雜度，而能在應用時專心該系統要解決的問題上就好。\r\n\r\n在這，<a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a> 把控制 DAL 的程式碼，封裝成一個 DG_Page 的 class 來處理，如此， UI 層 就只需要在簡單來呼叫使用即可。\r\n這部分程式碼，如下所示：\r\n\r\nDG_Page.php\r\n[php collapse="true"]\r\n&lt;?php\r\n\r\n/**\r\n  * @file DG_Page.php\r\n * @brief 基本檔網頁的資料處理\r\n * @author watson\r\n  * @version 1.0\r\n  * @date 2012-10-05\r\n */\r\nclass DG_Page \r\n{\r\n    var $db;\r\n    var $dal;\r\n    \r\n    /**\r\n      * @brief 建構式\r\n      *\r\n     * @param $fdal  該網頁資料處理對應的 DAL\r\n      *\r\n     * @return \r\n     */\r\n    public function __construct(IDAL $fdal)\r\n    {\r\n   require_once(&quot;..\\..\\db\\DB_config.php&quot;);\r\n    require_once(&quot;..\\..\\db\\DB_class.php&quot;);\r\n   \r\n    //if (!empty($fdal))\r\n    //{\r\n     //return die(get_class($this).&quot;-&gt;&quot;.__FUNCTION__.&quot; =&gt; DAL not define&quot;);\r\n    //}\r\n   \r\n    $this-&gt;db = new DB();\r\n    $this-&gt;db-&gt;connect_db($_DB[''host''], $_DB[''username''], $_DB[''password''], $_DB[''dbname'']);\r\n    \r\n    $this-&gt;dal = $fdal;\r\n    $this-&gt;dal-&gt;setDB($this-&gt;db);\r\n    }\r\n    \r\n    /**\r\n      * @brief 處理 Post 回來的資料，$_REQUEST[''type''] 不能為空\r\n     *\r\n     * @return Type=Insert, Update 成功 回傳 array(''success''=&gt;true)\r\n     *   Type=Data 回傳 EasyUI 用的資料集\r\n     * Type=Qry 回傳 JSON 資料集\r\n     */\r\n    public function dealPost()\r\n    {\r\n    $result = false;\r\n      \r\n    $type = $_REQUEST[''type''];\r\n    $msg = &quot;&quot;;\r\n    \r\n    if (!empty($_REQUEST[&quot;forKey&quot;]))\r\n    {\r\n     $_REQUEST[$this-&gt;dal-&gt;Foreignkey] = $_REQUEST[&quot;forKey&quot;];\r\n    }\r\n   \r\n    if($type == &quot;del&quot;)\r\n    {\r\n     $id = $_REQUEST[''id''];\r\n      $result = $this-&gt;dal-&gt;delete($id);\r\n    \r\n    }else if($type == &quot;data&quot;){\r\n      \r\n      $res = array();\r\n     \r\n      $res[&quot;total&quot;] = $this-&gt;dal-&gt;getTotalCount();\r\n      \r\n      $items = $this-&gt;dal-&gt;getData($_REQUEST);\r\n\r\n      $res[&quot;rows&quot;] = $items;\r\n      \r\n      echo json_encode($res); \r\n    }else if($type == &quot;qry&quot;){\r\n\r\n     $items = $this-&gt;dal-&gt;getData($_REQUEST);\r\n\r\n      echo json_encode($items); \r\n  \r\n    }else{\r\n      \r\n      if (!empty($_REQUEST[''id'']) ) {\r\n       $result = $this-&gt;dal-&gt;update();\r\n     }else{ // is add\r\n        $result = $this-&gt;dal-&gt;insert();\r\n     }\r\n   }\r\n   \r\n    if($type != &quot;data&quot; &amp;&amp; $type != &quot;qry&quot;)\r\n   {\r\n     if ($result == &quot;true&quot;){\r\n       echo json_encode(array(''success''=&gt;true));\r\n      } else {\r\n        \r\n        echo json_encode(array(''msg''=&gt;''had errors occured. '' . $result));\r\n      }\r\n   }\r\n    }\r\n}\r\n?&gt;\r\n[/php]\r\n\r\n由程式碼，可以看到<a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a>，把 在 <a href="http://o4u.tw/WebDoc.php?DocNum=6" title="PHP – EasyUI DataGrid 資料存的方式" target="_blank">PHP – EasyUI DataGrid 資料存的方式</a> 中 type 所定義的四個動作，DG_Page 在實做一次，跟 DAL 層不同的是這邊重點，主要在把 DAL 取出的資料，予以處理，將其格式調整成 UI 控件，在這範例中，也就是 EasyUI DataGrid 能接受的資料格式。\r\n\r\n如此，後面需要更換 控件時，就只需改寫 這個 class 即可，而且 DAL 的部分，它的功能也比在前篇的 dal_user class 更加明確，如此一來，本文的 dal 只單純在做資料處理，應用範圍就會更寬廣。\r\n\r\n最後，為了應用，前面寫的兩支程式，需在改寫 datagrid.php 這支程式，讓其在後面應用上，EasyUI DataGrid 都只需要呼叫自己本身來處理即可，不需在像前篇<a href="http://o4u.tw/WebDoc.php?DocNum=6" title="PHP – EasyUI DataGrid 資料存的方式" target="_blank">PHP – EasyUI DataGrid 資料存的方式</a> 中所述，還需要 呼叫另外一支 dal_user.php 的程式，如此一來，可大大 減少後須維護的程式相關檔案的數量，不用為了維護一支程式要找好幾支檔案來處理。\r\n\r\ndatagrid.php\r\n[php collapse="true"]\r\n&lt;?php\r\n  require_once(&quot;..\\..\\db\\DAL\\STDAL.php&quot;);\r\n\r\n $prgName = &quot;User&quot;;  \r\n  $dal = DALFactory::getInstance($prgName);\r\n \r\n  $LoginPath = &quot;datagrid.php&quot;;\r\n  \r\n  if (!empty($_REQUEST[''type'']) )\r\n {\r\n   require_once(&quot;..\\..\\util\\DG_Page.php&quot;);\r\n    \r\n    $myPage = new DG_Page($dal);\r\n    \r\n    $myPage-&gt;dealPost();\r\n }else{\r\n?&gt;\r\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;\r\n &lt;title&gt;一條小龍 easyUI datagrid&lt;/title&gt;\r\n \r\n\r\n  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../../JS/EasyUI/themes/default/easyui.css&quot;&gt;\r\n  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../../JS/EasyUI/themes/icon.css&quot;&gt;\r\n  \r\n  &lt;script type=&quot;text/javascript&quot; src=&quot;../../JS/jquery.js&quot;&gt;&lt;/script&gt;\r\n &lt;script type=&quot;text/javascript&quot; src=&quot;../../JS/EasyUI/jquery.easyui.min.js&quot;&gt;&lt;/script&gt;\r\n &lt;script type=&quot;text/javascript&quot; src=&quot;../../JS/EasyUI/easyui-lang-zh_CN.js&quot;&gt;&lt;/script&gt;\r\n \r\n  &lt;style type=&quot;text/css&quot;&gt;\r\n   #fm{\r\n      margin:0;\r\n     padding:10px 30px;\r\n    }\r\n   .ftitle{\r\n      font-size:14px;\r\n     font-weight:bold;\r\n     color:#666;\r\n     padding:5px 0;\r\n      margin-bottom:10px;\r\n     border-bottom:1px solid #ccc;\r\n   }\r\n   .fitem{\r\n     margin-bottom:5px;\r\n    }\r\n   .fitem label{\r\n     display:inline-block;\r\n     width:80px;\r\n   }\r\n &lt;/style&gt;\r\n  \r\n  &lt;script type=&quot;text/javascript&quot;&gt;\r\n   &lt;?php\r\n      echo &quot;post_prg = ''$LoginPath'';&quot;;\r\n      echo &quot;primay_key = ''$dal-&gt;PrimaryKey'';&quot;;\r\n   ?&gt;\r\n   var url;\r\n    \r\n    $(function(){\r\n     furl = post_prg+ ''?type=data'';\r\n      $(''#myDG'').datagrid({\r\n       url:furl\r\n      });\r\n   });\r\n\r\n   function newUser(){\r\n     $(''#dlg'').dialog(''open'').dialog(''setTitle'',''New User'');\r\n     $(''#fm'').form(''clear'');\r\n     url = post_prg + ''?type=add'';\r\n   }\r\n   function editUser(){\r\n      var row = $(''#myDG'').datagrid(''getSelected'');\r\n     if (row){\r\n       \r\n        if(typeof(row.UNum) !== ''undefined'')\r\n        {\r\n         $(''#dlg'').dialog(''open'').dialog(''setTitle'',''Edit User'');\r\n          $(''#fm'').form(''load'',row);\r\n          url = post_prg + ''?type=mod&amp;id=''+row.UNum;\r\n        }else{\r\n          alert(&quot;undefined&quot;);\r\n       }\r\n     }\r\n   }\r\n   function saveUser(){\r\n      $(''#fm'').form(''submit'',{\r\n        url: url,\r\n       onSubmit: function(){\r\n         //alert(''sub :''+ url);\r\n          return $(this).form(''validate'');\r\n        },\r\n        success: function(result){\r\n          var result = eval(''(''+result+'')'');\r\n          //alert(result.success);\r\n          if (result.success){\r\n            $(''#dlg'').dialog(''close'');    // close the dialog\r\n           $(''#myDG'').datagrid(''reload'');  // reload the user data\r\n         } else {\r\n            $.messager.show({\r\n             title: ''Error'',\r\n             msg: result.msg\r\n           });\r\n         }\r\n       }\r\n     });\r\n   }\r\n   function removeUser(){\r\n      var row = $(''#myDG'').datagrid(''getSelected'');\r\n     if (row){\r\n       $.messager.confirm(''Confirm'',''Are you sure you want to remove this user?'',function(r){\r\n          if (r){\r\n           //alert(row.UNum);\r\n            $.post(post_prg, {type:''del'', id:row.UNum}, function(result){\r\n             if (result.success){\r\n                $(''#myDG'').datagrid(''reload'');  // reload the user data\r\n             } else {\r\n                $.messager.show({ // show error message\r\n                 title: ''Error'',\r\n                 msg: result.msg\r\n               });\r\n             }\r\n           },''json'');\r\n          }\r\n       });\r\n     }\r\n   }\r\n &lt;/script&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n  &lt;h2&gt;一條小龍 easyUI datagrid url 存取測試2&lt;/h2&gt;\r\n \r\n  &lt;table id=&quot;myDG&quot; class=&quot;easyui-datagrid&quot; style=&quot;width:700px;height:450px&quot;\r\n      toolbar=&quot;#toolbar&quot;\r\n      title=&quot;Load Data&quot; iconCls=&quot;icon-save&quot; pagination=&quot;true&quot; \r\n      toolbar=&quot;#toolbar&quot; rownumbers=&quot;true&quot; fitColumns=&quot;true&quot; singleSelect=&quot;true&quot;&gt;\r\n    &lt;thead&gt;\r\n     &lt;tr&gt;\r\n        &lt;th field=&quot;STUID&quot; width=&quot;120&quot;&gt;User ID&lt;/th&gt;\r\n        &lt;th field=&quot;Password&quot; width=&quot;80&quot; align=&quot;right&quot;&gt;Password&lt;/th&gt;\r\n       &lt;th field=&quot;Birthday&quot; width=&quot;80&quot; align=&quot;right&quot;&gt;Birthday&lt;/th&gt;\r\n       &lt;th field=&quot;Nickname&quot; width=&quot;200&quot;&gt;Nickname&lt;/th&gt;\r\n        &lt;th field=&quot;DBSTS&quot; width=&quot;60&quot; align=&quot;center&quot;&gt;DBSTS&lt;/th&gt;\r\n      &lt;/tr&gt;\r\n   &lt;/thead&gt;\r\n  &lt;/table&gt;\r\n  &lt;div id=&quot;toolbar&quot;&gt;\r\n    &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-add&quot; plain=&quot;true&quot; onclick=&quot;newUser()&quot;&gt;New User&lt;/a&gt;\r\n    &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-edit&quot; plain=&quot;true&quot; onclick=&quot;editUser()&quot;&gt;Edit User&lt;/a&gt;\r\n   &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-remove&quot; plain=&quot;true&quot; onclick=&quot;removeUser()&quot;&gt;Remove User&lt;/a&gt;\r\n &lt;/div&gt;\r\n  \r\n  &lt;div id=&quot;dlg&quot; class=&quot;easyui-dialog&quot; style=&quot;width:400px;height:350px;padding:10px 20px&quot;\r\n     closed=&quot;true&quot; buttons=&quot;#dlg-buttons&quot;&gt;\r\n    &lt;div class=&quot;ftitle&quot;&gt;User Information&lt;/div&gt;\r\n    &lt;form id=&quot;fm&quot; method=&quot;post&quot; novalidate&gt;\r\n     &lt;div class=&quot;fitem&quot;&gt;\r\n       &lt;label&gt;User ID:&lt;/label&gt;\r\n       &lt;input name=&quot;STUID&quot; class=&quot;easyui-validatebox&quot; required=&quot;true&quot;&gt;\r\n     &lt;/div&gt;\r\n      &lt;div class=&quot;fitem&quot;&gt;\r\n       &lt;label&gt;Password:&lt;/label&gt;\r\n        &lt;input name=&quot;Password&quot; class=&quot;easyui-validatebox&quot; required=&quot;true&quot;&gt;\r\n      &lt;/div&gt;\r\n      &lt;div class=&quot;fitem&quot;&gt;\r\n       &lt;label&gt;Nickname:&lt;/label&gt;\r\n        &lt;input name=&quot;Nickname&quot;&gt;\r\n     &lt;/div&gt;\r\n      &lt;div class=&quot;fitem&quot;&gt;\r\n       &lt;label&gt;Birthday:&lt;/label&gt;\r\n        &lt;input name=&quot;Birthday&quot; class=&quot;easyui-validatebox&quot; validType=&quot;email&quot;&gt;\r\n      &lt;/div&gt;\r\n    &lt;/form&gt;\r\n &lt;/div&gt;\r\n  &lt;div id=&quot;dlg-buttons&quot;&gt;\r\n    &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-ok&quot; onclick=&quot;saveUser()&quot;&gt;Save&lt;/a&gt;\r\n   &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-cancel&quot; onclick=&quot;javascript:$(''#dlg'').dialog(''close'')&quot;&gt;Cancel&lt;/a&gt;\r\n &lt;/div&gt;\r\n  \r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\n&lt;?php\r\n\r\n  }\r\n \r\n?&gt;\r\n[/php]\r\n\r\n在這支程式中，UI 層還可以在用一個 Layout 來處理，把 整各畫面的排版方式，用一支 Layout 的 php or html 檔，來描述好再給這支程式來呼叫使用即可，如此就可讓 程式人員減少接觸太多的 HTML，並把 Layout 可以給專業網頁開發人員來處理，來達到前後台分離開發的目的。\r\n\r\n結果畫面，如下所示：\r\n<a href="http://o4u.tw/blogImgs/mvc_01.jpg"><img src="http://o4u.tw/blogImgs/mvc_01.jpg" alt="" title="mvc_01" width="536" height="391" class="alignnone size-full wp-image-130" /></a>\r\n<a href="http://o4u.tw/blogImgs/mvc_02.jpg"><img src="http://o4u.tw/blogImgs/mvc_02.jpg" alt="" title="mvc_02" width="601" height="444" class="alignnone size-full wp-image-131" /></a>', 10, 'watson', '2012-11-07 21:29:08', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(6, 'PHP', 'PHP – EasyUI DataGrid 資料存的方式', '繼上篇文章 PHP – EasyUI DataGrid 資料取的方式，本篇 一條小龍 繼續講述，如何操作 DataGrid，把資料存入資料庫，並實現 MVC 架構，將資料層分離、獨立運作。', '繼上篇文章 <a href="http://o4u.tw/WebDoc.php?DocNum=7" title="PHP – EasyUI DataGrid 資料取的方式" target="_blank">PHP – EasyUI DataGrid 資料取的方式</a>，本篇 一條小龍 繼續講述，如何操作 DataGrid，把資料存入資料庫，並實現 MVC 架構，將資料層分離、獨立運作。\r\n\r\n本篇文章主要是改良，原 EasyUI DataGrid 的範例 <a href="http://www.jeasyui.com/tutorial/app/crud.php" title="Build CRUD Application with jQuery EasyUI" target="_blank">Build CRUD Application with jQuery EasyUI</a>。\r\n\r\n在官方範例中已經示範如何操作資料，但其中有個問題就是，你要操作資料的每個動作都需要一支對應的程式才能動作，像是新增、刪除、修改以及取得資料，總共至少要有四支對應程式才能運作。\r\n\r\n讀者可以想想，這還只是一支單檔 使用者的基本資料維護而已，一般系統光基本資料都有十幾支甚至幾十支程式在運作，所以這樣的方式，勢必要改良才能運作在實務上。\r\n\r\n在來按造 <a href="http://o4u.tw/WebDoc.php?DocNum=9" title="多層次架構設計前言" target="_blank">多層次架構設計前言</a> 的精神，大家可以發現這四支程式其實對每一個基本資料的操作來說，都是大同小異的，所以是可以把他標準化，用成一個固定框架，供後面類似程式來使用。\r\n\r\n這部分，<a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a> 會分幾篇文章來逐漸完成這各過程，藉由這逐漸演進的過程，來了解框架是如何成形的。\r\n\r\n\r\n首先本篇，先來介紹，如何把分散的四支程式集中成為一支程式來呼叫，在讀者往下閱讀之前，可先在了解 <a href="http://o4u.tw/?p=115" title="PHP – EasyUI DataGrid 資料取的方式" target="_blank">PHP – EasyUI DataGrid 資料取的方式</a> 以及官方範例 <a href="http://www.jeasyui.com/tutorial/app/crud.php" title="Build CRUD Application with jQuery EasyUI" target="_blank">Build CRUD Application with jQuery EasyUI</a> 的運作方式，至少要能把範例 Run 起來，run 這個動作是很重要的，不要光看而已，親身去測試才能了解其中的問題點。\r\n\r\n要能實現將四支程式改成一支程式來運作，其實關鍵很簡單，就是去改每個操作動作時呼叫的 url，改成都呼叫 DAL 端的程式 dal_user.php，接下來在呼叫前，都要傳遞一個 type 參數告訴 dal 你要進行何種動作。\r\n\r\n目前 type 定義了下面四個動作\r\nadd  新增\r\nmod  修改\r\ndel  刪除\r\ndata 取得資料\r\n\r\n了解 想要 dal 作哪些動作後，就可以開始來撰寫 dal 程式了，當然現在這各 dal 還是一個非標準化的程式，但是他已經做到 MVC 的精神，把資料存取層跟表現層 分離開了，後面的文章，<a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a> 會再來介紹，如何把本篇介紹的程式來標準化 dal 以及 UI 表現層。\r\n\r\ndal_user.php\r\n[php collapse="true"]\r\n&lt;?php\r\n $result = false;\r\n  \r\n  if (!empty($_REQUEST[''type'']) )\r\n {\r\n   require_once(&quot;.\\..\\db\\DB_config.php&quot;);\r\n   require_once(&quot;.\\..\\db\\DB_class.php&quot;);\r\n    \r\n    $db = new DB();\r\n   $db-&gt;connect_db($_DB[''host''], $_DB[''username''], $_DB[''password''], $_DB[''dbname'']);\r\n     \r\n    $tablename = &quot;STUser&quot;;\r\n    \r\n    $type = $_REQUEST[''type''];\r\n    if($type == &quot;del&quot;)\r\n    {\r\n     $id = $_REQUEST[''id''];\r\n      $sql = &quot;delete from STUser where UNum=$id&quot;;\r\n     $result = $db-&gt;query($sql);\r\n    }else if($type == &quot;data&quot;){\r\n      $page = isset($_POST[''page'']) ? intval($_POST[''page'']) : 1;  \r\n     $rows = isset($_POST[''rows'']) ? intval($_POST[''rows'']) : 10;  \r\n      $offset = ($page-1)*$rows;\r\n      $result = array();\r\n  \r\n      $db-&gt;query(&quot;select count(*) As Total from $tablename&quot;);\r\n      $row = $db-&gt;fetch_assoc();\r\n\r\n\r\n\r\n\r\n     $result[&quot;total&quot;] = $row[&quot;Total&quot;];\r\n\r\n\r\n\r\n\r\n     $db-&gt;query(&quot;select * from $tablename limit $offset,$rows&quot;);\r\n\r\n\r\n\r\n\r\n      $items = array();  \r\n     while($row = $db-&gt;fetch_assoc()){  \r\n        array_push($items, $row);  \r\n     } \r\n      $result[&quot;rows&quot;] = $items;  \r\n\r\n\r\n\r\n\r\n     echo json_encode($result);  \r\n    }else{\r\n      $STUID = $_REQUEST[''STUID''];\r\n      $Password = $_REQUEST[''Password''];\r\n      $Nickname = $_REQUEST[''Nickname''];\r\n      $Birthday = $_REQUEST[''Birthday''];\r\n      \r\n      if (!empty($_REQUEST[''id'']) ) {\r\n       $id = $_REQUEST[''id''];\r\n        $sql = &quot;update $tablename set STUID=''$STUID'',Password=''$Password'',Nickname=''$Nickname'' where UNum=$id&quot;;\r\n     }else{ // is add\r\n        $sql = &quot;insert into $tablename (STUID, Password, Nickname, DBSTS) values(''$STUID'',''$Password'',''$Nickname'', ''A'')&quot;;\r\n     }\r\n     $result = $db-&gt;query($sql);\r\n    }\r\n }\r\n \r\n  if($type != &quot;data&quot;)\r\n {\r\n   if ($result == &quot;true&quot;){\r\n     echo json_encode(array(''success''=&gt;true));\r\n    } else {\r\n      \r\n      echo json_encode(array(''msg''=&gt;''had errors occured. '' . $result));\r\n    }\r\n }\r\n?&gt;\r\n[/php]\r\n\r\ndal 資料存取層 定義完了以後，就可以來實現 UI 介面來呼叫 dal，因為是使用 AJAX 的方式 來存取資料，所以 MVC 中的控制層有一部分是放在 介面層中，這部分，後面可以在用 JavaScript 將這部分的控制層標準化，在藉由 php 後端來傳遞參數呼叫，如此一來，則還是將所有控制大權集中在一支程式中，這些後面文章 <a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a> 會再來介紹，這邊先暫時打住。\r\n\r\ndatagrid.php\r\n[php collapse="true"]\r\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;\r\n &lt;title&gt;一條小龍 easyUI datagrid&lt;/title&gt;\r\n \r\n\r\n  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./../JS/EasyUI/themes/default/easyui.css&quot;&gt;\r\n &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./../JS/EasyUI/themes/icon.css&quot;&gt;\r\n \r\n  &lt;script type=&quot;text/javascript&quot; src=&quot;./../JS/jquery.js&quot;&gt;&lt;/script&gt;\r\n  &lt;script type=&quot;text/javascript&quot; src=&quot;./../JS/EasyUI/jquery.easyui.min.js&quot;&gt;&lt;/script&gt;\r\n  &lt;script type=&quot;text/javascript&quot; src=&quot;./../JS/EasyUI/easyui-lang-zh_CN.js&quot;&gt;&lt;/script&gt;\r\n  \r\n  &lt;style type=&quot;text/css&quot;&gt;\r\n   #fm{\r\n      margin:0;\r\n     padding:10px 30px;\r\n    }\r\n   .ftitle{\r\n      font-size:14px;\r\n     font-weight:bold;\r\n     color:#666;\r\n     padding:5px 0;\r\n      margin-bottom:10px;\r\n     border-bottom:1px solid #ccc;\r\n   }\r\n   .fitem{\r\n     margin-bottom:5px;\r\n    }\r\n   .fitem label{\r\n     display:inline-block;\r\n     width:80px;\r\n   }\r\n &lt;/style&gt;\r\n  \r\n  &lt;script type=&quot;text/javascript&quot;&gt;\r\n   var url;\r\n    function newUser(){\r\n     $(''#dlg'').dialog(''open'').dialog(''setTitle'',''New User'');\r\n     $(''#fm'').form(''clear'');\r\n     url = ''dal_user.php?type=add'';\r\n    }\r\n   function editUser(){\r\n      var row = $(''#myDG'').datagrid(''getSelected'');\r\n     if (row){\r\n       \r\n        if(typeof(row.UNum) !== ''undefined'')\r\n        {\r\n         $(''#dlg'').dialog(''open'').dialog(''setTitle'',''Edit User'');\r\n          $(''#fm'').form(''load'',row);\r\n          url = ''dal_user.php?type=mod&amp;id=''+row.UNum;\r\n       }else{\r\n          alert(&quot;undefined&quot;);\r\n       }\r\n     }\r\n   }\r\n   function saveUser(){\r\n      $(''#fm'').form(''submit'',{\r\n        url: url,\r\n       onSubmit: function(){\r\n         //alert(''sub :''+ url);\r\n          return $(this).form(''validate'');\r\n        },\r\n        success: function(result){\r\n          var result = eval(''(''+result+'')'');\r\n          //alert(result.success);\r\n          if (result.success){\r\n            $(''#dlg'').dialog(''close'');    // close the dialog\r\n           $(''#myDG'').datagrid(''reload'');  // reload the user data\r\n         } else {\r\n            $.messager.show({\r\n             title: ''Error'',\r\n             msg: result.msg\r\n           });\r\n         }\r\n       }\r\n     });\r\n   }\r\n   function removeUser(){\r\n      var row = $(''#myDG'').datagrid(''getSelected'');\r\n     if (row){\r\n       $.messager.confirm(''Confirm'',''Are you sure you want to remove this user?'',function(r){\r\n          if (r){\r\n           //alert(row.UNum);\r\n            $.post(''dal_user.php'', {type:''del'', id:row.UNum}, function(result){\r\n             if (result.success){\r\n                $(''#myDG'').datagrid(''reload'');  // reload the user data\r\n             } else {\r\n                $.messager.show({ // show error message\r\n                 title: ''Error'',\r\n                 msg: result.msg\r\n               });\r\n             }\r\n           },''json'');\r\n          }\r\n       });\r\n     }\r\n   }\r\n &lt;/script&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n  &lt;h2&gt;一條小龍 easyUI datagrid url 存取測試&lt;/h2&gt;\r\n  \r\n  &lt;table id=&quot;myDG&quot; class=&quot;easyui-datagrid&quot; style=&quot;width:700px;height:450px&quot;\r\n      url=&quot;dal_user.php?type=data&quot; toolbar=&quot;#toolbar&quot;\r\n     title=&quot;Load Data&quot; iconCls=&quot;icon-save&quot; pagination=&quot;true&quot; \r\n      toolbar=&quot;#toolbar&quot; rownumbers=&quot;true&quot; fitColumns=&quot;true&quot; singleSelect=&quot;true&quot;&gt;\r\n    &lt;thead&gt;\r\n     &lt;tr&gt;\r\n        &lt;th field=&quot;STUID&quot; width=&quot;120&quot;&gt;User ID&lt;/th&gt;\r\n        &lt;th field=&quot;Password&quot; width=&quot;80&quot; align=&quot;right&quot;&gt;Password&lt;/th&gt;\r\n       &lt;th field=&quot;Birthday&quot; width=&quot;80&quot; align=&quot;right&quot;&gt;Birthday&lt;/th&gt;\r\n       &lt;th field=&quot;Nickname&quot; width=&quot;200&quot;&gt;Nickname&lt;/th&gt;\r\n        &lt;th field=&quot;DBSTS&quot; width=&quot;60&quot; align=&quot;center&quot;&gt;DBSTS&lt;/th&gt;\r\n      &lt;/tr&gt;\r\n   &lt;/thead&gt;\r\n  &lt;/table&gt;\r\n  &lt;div id=&quot;toolbar&quot;&gt;\r\n    &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-add&quot; plain=&quot;true&quot; onclick=&quot;newUser()&quot;&gt;New User&lt;/a&gt;\r\n    &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-edit&quot; plain=&quot;true&quot; onclick=&quot;editUser()&quot;&gt;Edit User&lt;/a&gt;\r\n   &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-remove&quot; plain=&quot;true&quot; onclick=&quot;removeUser()&quot;&gt;Remove User&lt;/a&gt;\r\n &lt;/div&gt;\r\n  \r\n  &lt;div id=&quot;dlg&quot; class=&quot;easyui-dialog&quot; style=&quot;width:400px;height:350px;padding:10px 20px&quot;\r\n     closed=&quot;true&quot; buttons=&quot;#dlg-buttons&quot;&gt;\r\n    &lt;div class=&quot;ftitle&quot;&gt;User Information&lt;/div&gt;\r\n    &lt;form id=&quot;fm&quot; method=&quot;post&quot; novalidate&gt;\r\n     &lt;div class=&quot;fitem&quot;&gt;\r\n       &lt;label&gt;User ID:&lt;/label&gt;\r\n       &lt;input name=&quot;STUID&quot; class=&quot;easyui-validatebox&quot; required=&quot;true&quot;&gt;\r\n     &lt;/div&gt;\r\n      &lt;div class=&quot;fitem&quot;&gt;\r\n       &lt;label&gt;Password:&lt;/label&gt;\r\n        &lt;input name=&quot;Password&quot; class=&quot;easyui-validatebox&quot; required=&quot;true&quot;&gt;\r\n      &lt;/div&gt;\r\n      &lt;div class=&quot;fitem&quot;&gt;\r\n       &lt;label&gt;Nickname:&lt;/label&gt;\r\n        &lt;input name=&quot;Nickname&quot;&gt;\r\n     &lt;/div&gt;\r\n      &lt;div class=&quot;fitem&quot;&gt;\r\n       &lt;label&gt;Birthday:&lt;/label&gt;\r\n        &lt;input name=&quot;Birthday&quot; class=&quot;easyui-validatebox&quot; validType=&quot;email&quot;&gt;\r\n      &lt;/div&gt;\r\n    &lt;/form&gt;\r\n &lt;/div&gt;\r\n  &lt;div id=&quot;dlg-buttons&quot;&gt;\r\n    &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-ok&quot; onclick=&quot;saveUser()&quot;&gt;Save&lt;/a&gt;\r\n   &lt;a href=&quot;#&quot; class=&quot;easyui-linkbutton&quot; iconCls=&quot;icon-cancel&quot; onclick=&quot;javascript:$(''#dlg'').dialog(''close'')&quot;&gt;Cancel&lt;/a&gt;\r\n &lt;/div&gt;\r\n  \r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n[/php]\r\n\r\n運作結果畫面如下所示：\r\n<a href="http://o4u.tw/blogImgs/mvc_01.jpg"><img src="http://o4u.tw/blogImgs/mvc_01.jpg" alt="" title="mvc_01" width="536" height="391" class="alignnone size-full wp-image-130" /></a>\r\n\r\n<a href="http://o4u.tw/blogImgs/mvc_02.jpg"><img src="http://o4u.tw/blogImgs/mvc_02.jpg" alt="" title="mvc_02" width="601" height="444" class="alignnone size-full wp-image-131" /></a>', 2, 'watson', '2012-11-03 10:16:55', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(7, 'PHP', 'PHP - EasyUI DataGrid 資料取的方式', 'EasyUI DataGrid 是一個用 Jquery 寫的 DataGrid，由此可知，是一個 前端 Web UI 技術，一般大家在產生 DataGrid 比較常見的應該就是使用後台 PHP 等後台語言，來直接產生 HTML 語法，來顯示 DataGrid，當要對該 DataGrid 操作時，在傳遞參數到後端，重新產生整各網頁。', 'EasyUI DataGrid 是一個用 Jquery 寫的 DataGrid，由此可知，是一個 前端 Web UI 技術，一般大家在產生 DataGrid 比較常見的應該就是使用後台 PHP 等後台語言，來直接產生 HTML 語法，來顯示 DataGrid，當要對該 DataGrid 操作時，在傳遞參數到後端，重新產生整各網頁。\r\n\r\n而 EasyUI DataGrid 支援兩種做法，一個是，上述，後台 server 把顯示的 HTML 產生好，在給前端顯示。另一種是，利用 AJAX 的方式來產生，就只是單純餵 JSON 格式資料給前端，前端接收到資料後，在自己分析資料利用 JQuery 來刷新 DataGrid 該部分的畫面。\r\n\r\n這邊介紹的是第二種做法，利用 AJAX 技術來做，這樣的好處，是可以把 資料層-> 控制層-> 展示層 三層獨立來運作，達到我在之前 <a href="http://o4u.tw/WebDoc.php?DocNum=9" title="多層次架構設計前言" target="_blank">多層次架構設計前言</a> 所講的精神，不會像老方法，把 HTML 的產生都放在 PHP 中來產生，造成 PHP 開發人員本身，也要對 HTML 等前端技術也要了解很深才能進行開發的問題。\r\n\r\n在來如此作法，為帶來另一種好處，就是你前端的 UI 是可以更換，而後台程式卻不用來大幅修改。目前支援 JSON 資料格式的 JavaScript DataGrid 有很多各，大家也可以多去參考其他的公司所提供的 DataGrid ，從中選擇一個最適合的來使用。\r\n\r\n介紹到此，接下來直接看程式碼，會更加了解我上述的意思：\r\n\r\n首先，需要先設計 HTML UI 介面，定義要顯示哪些欄位，欄位的顯示名稱等，關於這部分的欄位定義，EasyUI DataGrid 也是有提供，使用 JavaScript 來動態定義，而<a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a> 習慣用 HTML 直接定義，這樣 也不複雜，後面在分工上，也比較容易來直接交給 Web 美工人員來直接操作。\r\n\r\n這部分重點在 URL 的設定。\r\nDataGrid2.php\r\n[html]\r\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;\r\n &lt;meta name=&quot;keywords&quot; content=&quot;jquery,ui,easy,easyui,web&quot;&gt;\r\n  &lt;meta name=&quot;description&quot; content=&quot;easyui help you build your web page easily!&quot;&gt;\r\n &lt;title&gt;一條小龍 easyUI datagrid&lt;/title&gt;\r\n &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./JS/EasyUI/themes/default/easyui.css&quot;&gt;\r\n  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./JS/EasyUI/themes/icon.css&quot;&gt;\r\n  \r\n  &lt;script type=&quot;text/javascript&quot; src=&quot;./JS/jquery.js&quot;&gt;&lt;/script&gt;\r\n &lt;script type=&quot;text/javascript&quot; src=&quot;./JS/EasyUI/jquery.easyui.min.js&quot;&gt;&lt;/script&gt;\r\n \r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n &lt;h2&gt;一條小龍 easyUI datagrid url test&lt;/h2&gt;\r\n  \r\n  &lt;table id=&quot;tt&quot; class=&quot;easyui-datagrid&quot; style=&quot;width:750px;height:300px&quot;\r\n      url=&quot;datagrid2_getdata.php&quot; title=&quot;Load Data&quot; pagination=&quot;true&quot;&gt;\r\n   &lt;thead&gt;\r\n     &lt;tr&gt;\r\n        &lt;th field=&quot;UNum&quot; width=&quot;80&quot;&gt;UNum&lt;/th&gt;\r\n       &lt;th field=&quot;STUID&quot; width=&quot;120&quot;&gt;User ID&lt;/th&gt;\r\n        &lt;th field=&quot;Password&quot; width=&quot;80&quot; align=&quot;right&quot;&gt;Password&lt;/th&gt;\r\n       &lt;th field=&quot;Birthday&quot; width=&quot;80&quot; align=&quot;right&quot;&gt;Birthday&lt;/th&gt;\r\n       &lt;th field=&quot;Nickname&quot; width=&quot;200&quot;&gt;Nickname&lt;/th&gt;\r\n        &lt;th field=&quot;DBSTS&quot; width=&quot;60&quot; align=&quot;center&quot;&gt;DBSTS&lt;/th&gt;\r\n      &lt;/tr&gt;\r\n   &lt;/thead&gt;\r\n  &lt;/table&gt;\r\n  \r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n[/html]\r\n\r\n在來定義資料取得的後台介面\r\ndatagrid2_getdata.php\r\n[php]\r\n&lt;?php\r\n  $page = isset($_POST[''page'']) ? intval($_POST[''page'']) : 1;  \r\n $rows = isset($_POST[''rows'']) ? intval($_POST[''rows'']) : 10;  \r\n  $offset = ($page-1)*$rows;\r\n  $result = array();\r\n\r\n  $tablename = &quot;STUser&quot;;\r\n  // ...  \r\n  require_once(&quot;.\\db\\DB_config.php&quot;);\r\n require_once(&quot;.\\db\\DB_class.php&quot;);\r\n\r\n  $db = new DB();\r\n $db-&gt;connect_db($_DB[''host''], $_DB[''username''], $_DB[''password''], $_DB[''dbname'']);\r\n $db-&gt;query(&quot;select count(*) As Total from $tablename&quot;);\r\n  $row = $db-&gt;fetch_assoc();\r\n\r\n $result[&quot;total&quot;] = $row[&quot;Total&quot;];\r\n\r\n $db-&gt;query(&quot;select * from $tablename limit $offset,$rows&quot;);\r\n\r\n  $items = array();  \r\n while($row = $db-&gt;fetch_assoc()){  \r\n    array_push($items, $row);  \r\n } \r\n  $result[&quot;rows&quot;] = $items;  \r\n\r\n echo json_encode($result);  \r\n?&gt;\r\n[/php]\r\n由上述，可以看出，這是一個很單純的資料取得的動作。\r\n一開始 DataGrid 會傳進來 兩個參數，\r\n$_POST[''page''])  目前是在第幾頁\r\n$_POST[''rows''])  每頁要顯示幾筆資料\r\n\r\n然後，要使用一個陣列 $result ，存放兩個資訊，\r\n$result["total"] 有幾筆資料\r\n$result["rows"] 存放實際的資料陣列集\r\n最後要將 $result 陣列，產生將 JSON 資料格式來輸出，DataGrid 接收到以後就會來處理、刷新畫面了。\r\n\r\n後面，在更進一步，可以將 datagrid2_getdata.php 在抽象化一層，也就是將屬於 EasyUI DataGrid 特有的資料格式處理的部分與資料庫存取的的部分分離，各自獨立出來成為 兩個 class 來處理。\r\n\r\n一個好的架構 以及 class 設計，其實都是靠經驗的累積而生成的，不斷演進改良，原有的框架，其中最重要的精神就是，每個 Class 的分工要清楚而且精確，這是為了應付上述，不斷演進 這各問題來做的對應措施，這樣在未來才更容易去做修改調整。\r\n\r\n否則更容易變成，你想改卻不知從何下手，因為一改就有幾十支，甚至上百支程式等著你，要一起修改，從而延伸出，穩定性問題，也就是大家反對去修改原有系統，就是因為 太多要改了，少改一支也不行，問題幾十支一起改，就算都改完，誰來測試有沒有改好，難道叫你的 user 來幫你測，想想，就還是算了，不要再改了，反正現在系統也都還好好的可以用。\r\n\r\n所以由上述可知，一個好的架構規劃，對未來的發展是很有幫助的，後面我會再找一些例子，在讓讀者來了解架構設計的其中精神。', 4, 'watson', '2012-11-01 12:18:18', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(8, 'PHP', 'PHP - 架構設計 Data Access Layer 篇', '在前面 多層次架構設計前言 囉哩囉嗦講了一堆，就是為了後面的架構設計的文章，作鋪陳，這樣才能用更寬廣的角度來看其中帶來的意義。', '在前面 多層次架構設計前言 囉哩囉嗦講了一堆，就是為了後面的架構設計的文章，作鋪陳，這樣才能用更寬廣的角度來看其中帶來的意義。\r\n\r\n首先，大概陳述一下架構的關聯，如下所述：\r\n<ol>\r\n <li>首先會先設計 標準 DAL class (STDAL)，放置 getData, delete, update 等 標準常見的功能函數</li>\r\n <li>在來設計程式會用到的各種 DAL ，基本上每一個 Table 都需要有一個 DAL 來實現，後面根據 table 應用、畫面呈現等需求，也可以一個 table 有多個 DAL ，這各觀念類似 View 的概念。</li>\r\n  <li>根據 商業邏輯的操作，製作對應的 BLL，像是insert、update 前的資料檢查，這部分會根據商務應用的不同而不同，所以下面不做示範。</li>\r\n <li>在來要有一個 DAL 產生工廠(DALFactory)，專門用來協助建立 DAL 的實體，因為 DAL 程式檔案，可能放在另一台主機，或是 不同目錄位置中等等因素，為簡化開發人員的負擔，所以 DAL 建立方式，統一封裝在 DALFactory 裡面</li>\r\n</ol>\r\n\r\n接下來，依照上述建了下述程式： \r\nSTDAL.php\r\n[php]\r\n&lt;?php\r\nclass STDAL\r\n{\r\n  public $TableName;\r\n  \r\n  public function __construct() {\r\n   echo $this-&gt;TableName.&quot; init STDAL&lt;br&gt;&quot;;\r\n }\r\n \r\n  public function getData()\r\n {\r\n   print &quot;select * from &quot;.$this-&gt;TableName.&quot;&lt;br&gt;&quot;;\r\n  }\r\n \r\n  public function setDB($db)\r\n  {\r\n   echo $db.&quot;&lt;br&gt;&quot;;\r\n  }\r\n}\r\n?&gt;\r\n[/php]\r\n\r\nSTUser.php\r\n[php]\r\n&lt;?php\r\nclass DAL_STUser extends STDAL\r\n{\r\n public function __construct() {\r\n   $this-&gt;TableName = &quot;STUser&quot;;\r\n   parent::__construct();\r\n  }\r\n}\r\n?&gt;\r\n[/php]\r\n\r\nSTDoc.php\r\n[php]\r\n&lt;?php\r\nclass DAL_STDoc extends STDAL\r\n{\r\n public function __construct() {\r\n   $this-&gt;TableName = &quot;STDoc&quot;;\r\n    parent::__construct();\r\n  }\r\n}\r\n?&gt;\r\n[/php]\r\n\r\n下面 DAL 產生工廠，有運用我在 <a href="http://o4u.tw/?p=97" title="PHP – 類別初探" target="_blank">PHP – 類別初探</a> 中所講的技巧，有興趣可在去看下。\r\nDALFactory.php\r\n[php]\r\n&lt;?php\r\nclass DALFactory\r\n{\r\n private static $db;\r\n \r\n    public static function getInstance($prgName) {\r\n    \r\n    if(!self::$db) { \r\n     self::$db = $prgName.&quot; get DB connection&quot;; \r\n   }\r\n   $class = &quot;DAL_$prgName&quot;;\r\n    $obj = new $class();\r\n    $obj-&gt;setDB(self::$db);\r\n    return $obj;\r\n    }\r\n}\r\n?&gt;\r\n[/php]\r\n\r\n上述就已經完成 Data Access Layer 的製作，接下來 我門測試一下，是否正常運作。\r\ntest.php\r\n[php]\r\n&lt;?php\r\n$prgName = &quot;STUser&quot;;\r\n$obj = DALFactory::getInstance($prgName);\r\n$obj-&gt;getData();\r\n\r\n$prgName = &quot;STDoc&quot;;\r\n$obj = DALFactory::getInstance($prgName);\r\n$obj-&gt;getData();\r\n?&gt;\r\n[/php]\r\n\r\n\r\n測試結果，如下所示：\r\nSTUser init STDAL\r\nSTUser get DB connection\r\nselect * from STUser\r\nSTDoc init STDAL\r\nSTUser get DB connection\r\nselect * from STDoc', 3, 'watson', '2012-10-29 16:30:54', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(9, 'PHP', '多層次架構設計前言', '因為 php 原生來就是要輔助 HTML 的產生，所以程式碼跟 HTML 碼混在一起寫，正是 PHP 的特點也是優點，但正也造成很多分工上的問題，也就是你在寫 php 的同時，你也必須很了解 前端、後端技能，像是 DataBase, HTML, css, JavaScript 等等。', '因為 php 原生來就是要輔助 HTML 的產生，所以程式碼跟 HTML 碼混在一起寫，正是 PHP 的特點也是優點，但正也造成很多分工上的問題，也就是你在寫 php 的同時，你也必須很了解 前端、後端技能，像是 DataBase, HTML, css, JavaScript 等等。\r\n\r\n這種情形，找新人來開發的困難，這個情況，大家可以從求職廣告中，窺見一二，下面<a href="http://o4u.tw" target="_blank">一條小龍</a> 找了一個 求職廣告給大家看看他的求職條件，大家 就知道這各問題有多嚴重了：\r\n\r\n1. 有網站建置及程式設計經驗。\r\n2. 熟悉 PHP 程式語言。\r\n3. 熟悉 MySQL 資料庫。\r\n4. 瞭解 HTML 、 Java Script 、 CSS 、 jQuery 等 Web 技術。\r\n5. 認真負責，且希望在程式設計及網頁技術方面不斷精進。\r\n\r\n\r\n上述是某某公司要找 PHP 程式設計師要求的技能，看得出來，想要當一個 php 程式設計師真的是不好混，幾乎什麼都要會。\r\n開發人員在暗罵老闆的求職條件太高的同時，對老闆來說，他也很頭痛，因為要找到什麼都要會的人才，真是不容易，而且重點是，他還沒辦法，給太多薪水。\r\n這樣的背景下，導致最後，只能找到一個什麼都會一點的人，有聽過 梧鼠技窮 的故事嗎?\r\n什麼都會一點，反過來說，就是什麼都不熟。\r\n\r\n所以<a href="http://o4u.tw" target="_blank">一條小龍</a>常常覺得，科技來自人性、管理來自需求，而需求是可以由公司創造的。\r\n\r\n另外，<a href="http://o4u.tw" target="_blank">一條小龍</a> 又另外找了一個工作職缺的求職條件，給大家 比較看看，他的職務名稱是\r\n\r\n工作條件：\r\n\r\n1.日常網站制作維護更新\r\n2.活動網站制作維護更新\r\n3.創意發想\r\n4.研究熱忱\r\n5.良好的團隊工作能力\r\n6.可獨立完成DIV+CSS切版(PSD to HTML)\r\n7.手機版網站開發經驗\r\n8.熟悉多瀏覽器CSS調整\r\n9.熟練應用JQuery\r\n\r\n這各工作的所需條件，就比前一個少多了，但是重點是，這兩份工作的薪水，卻是差不多的，那請問各為開發人員，是你要如何選擇勒。\r\n這也給大家一個思考方向，大家出來工作、開公司都是要講投資報酬率的，對開發員來說就是以最少的學習成本獲得最大新資，\r\n對企業主來說，你的人才所需工作條件越少，一般而言你的成本也會越低。\r\n\r\n因此，近年來可以看到很多，多層次架構的設計理論出現，對網站開發來說，最常聽到的就是 MVC 了，也就是 Model - View - Control。\r\n\r\n但要真的能切割分工好，其實並不需要先進的設計理論或是高深的技術。\r\n\r\n只需要公司的體系中要有一架構設計師來管控就可以，當然這各角色需要一個夠資深，叫的動人做事，夠 Power 來搶資源(怎麼聽起來很像就是老闆本人)。\r\n\r\n這個角色的工作如下：\r\n<ul>\r\n  <li>定期作 Code Review，檢視程式碼的撰寫，是否符合規範。</li>\r\n <li>定期開主管會議，來檢討公司的公用程式庫、底層架構以及目前開發專案在使用上的問題</li>\r\n  <li>定期檢視公司願景與底層架構等是否能配合</li>\r\n</ul>\r\n\r\n其實上述，聽起來都不複雜，只是要有 執行力 去做罷了。\r\n\r\n下面會陸續用 php Web 技術來介紹，怎樣來分割技術層次，好達到來分工製作。', 2, 'watson', '2012-10-29 15:47:21', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(10, 'PHP', 'PHP - 類別初探', 'php 一開始沒有支援完整的物件導向語法，在後來的 php 4-5 開始支援，但還是很多 php 老手，不習慣使用 class 來開發，頂多是把 class 當作一個模組 或是 程式庫 來使用，這真是很可惜。', 'php 一開始沒有支援完整的物件導向語法，在後來的 php 4-5 開始支援，但還是很多 php 老手，不習慣使用 class 來開發，頂多是把 class 當作一個模組 或是 程式庫 來使用，這真是很可惜。\r\n\r\n所以 <a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a>接下來會用幾篇文章，來陸續介紹 php class 的使用。\r\n\r\n首先，從建構式 開始，php 的建構式有兩種方式，<a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a> 一開始 也搞的有點糊塗，經<a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a>測試兩個方式都能達到同樣效果，緣由就不考究了\r\n\r\n下面兩個程式碼，分別示範兩個方式：\r\n[php]\r\n&lt;?php\r\nclass test\r\n{\r\n  private $str;\r\n \r\n  public function __construct() {\r\n   $this-&gt;str = &quot;con&quot;;\r\n  }\r\n \r\n  function toPrint()\r\n  {\r\n   print $this-&gt;str.&quot;.work&lt;br&gt;&quot;;\r\n  }\r\n}\r\n\r\nclass test2\r\n{\r\n  private $str;\r\n \r\n  function test2() {\r\n    $this-&gt;str = &quot;new&quot;;\r\n  }\r\n \r\n  function toPrint()\r\n  {\r\n   print $this-&gt;str.&quot;.work&lt;br&gt;&quot;;\r\n  }\r\n}\r\n\r\n$obj = new test();\r\n$obj-&gt;toPrint();\r\n\r\n$obj = new test2();\r\n$obj-&gt;toPrint();\r\n?&gt;\r\n[/php]\r\n\r\n接下來，來呼叫使用上述程式可得到結果如下：\r\ncon.work\r\nnew.work\r\n\r\n由此可知，兩個不同的表達方式都能達到建構式的效果。\r\n不過<a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a>個人是比較喜歡第一種 __construct() 的方式，為什麼勒，因為程式碼 就是都在 複製貼上修改的過程中渡過的，因此第一種可以減少我修改建構式名稱，何樂而不為勒。\r\n\r\n最後，介紹另一種特別的建構方式，這各方式可以確保，在一個執行期間，都使用同一個物件實體，用描述的比較難理解，請看下面範例：\r\n[php]\r\nclass test3\r\n{\r\n private static $instance;\r\n private $str;\r\n private $index;\r\n \r\n  public static function getInstance() {\r\n    if(!self::$instance) { \r\n     self::$instance = new self(); \r\n    } \r\n\r\n    return self::$instance; \r\n  }\r\n   \r\n  private function __construct() {\r\n    $this-&gt;str = &quot;con&quot;;\r\n    $this-&gt;index = 0;\r\n  }\r\n \r\n  function toPrint()\r\n  {\r\n   $this-&gt;index++;\r\n    print $this-&gt;index.$this-&gt;str.&quot;.work&lt;br&gt;&quot;;\r\n  }\r\n}\r\n$obj = test3::getInstance();\r\n$obj-&gt;toPrint();\r\n\r\n$obj = test3::getInstance();\r\n$obj-&gt;toPrint();\r\n[/php]\r\n\r\n執行結果如下：\r\n1con.work\r\n2con.work\r\n\r\n由此看到，$index 並不會因為重新 取得一個物件實體(get instance)而重新產生，而是在一直重複使用，\r\n這各方式主要還是用在資料庫連線的取得方面，可以減少資源的重複取得，而造成連線不斷增加。\r\n\r\n這在讀者的程式碼 很長的時候，或是大量使用 class 來操作時，都可以使用到，可以減少寫程式時，重複判斷是否以取得連線的方式，\r\n就直接、而且很單純的來取得實體來運用就好了。\r\n\r\n不過 也要小心使用，因為 這相當於，一個 全域變數了，所以請使用時，要封裝在 class 中，而且該 class 的操作功能要單純、明確，就可以減少全域變數帶來的問題了，並能享受該功能帶來的便利。\r\n\r\n最後 建構式，記得 定義成 private 這樣可以強迫使用者，來使用 getInstance 來建構 class。', 3, 'watson', '2012-10-28 08:36:25', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(11, 'HTML', 'HTML - div 固定位置顯示', '要固定位置，主要是用 css 來控制，範例 如下', '要固定位置，主要是用 css 來控制，範例 如下\r\n\r\n[html]\r\n&lt;div style=&quot;left:5px;top:100px;position:fixed;z-index:1;&quot;&gt; \r\n    你的顯示內容\r\n&lt;/div&gt;\r\n[/html]\r\n\r\n參數說明：\r\n<ul>\r\n <li>position:fixed; 顯示在固定位置上</li>\r\n <li>left:5px; 距離左邊的絕對位置</li>\r\n  <li>top:100px; 距離上邊的絕對位置</li>\r\n <li>z-index:1; 顯示在畫面其他元素的上方</li>\r\n</ul>\r\n\r\n\r\n資料來源：http://www.iyoume.net/profiles/blogs/css-jiao-xue-pai-ban-ji#axzz2AUDAG369', 1, 'watson', '2012-10-27 17:09:40', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(12, 'PHP', 'PHP - 簡單好用的 table 元件介紹', '因為我是先學 asp.net 在來學 php 的，所以就對 php 什麼都要自己來很感冒，連畫各 table 都要自己 想辦法 描述 table 的 html，簡直快瘋了。', '因為<a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a> 是先學 asp.net 在來學 php 的，所以就對 php 什麼都要自己來很感冒，連畫各 table 都要自己 想辦法 描述 table 的 html，簡直快瘋了。\r\n\r\n所以 <a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a> 就找了這各工具，來協助我 建立很常用到的 html table，以下是官方網站所說他這各 類的特點，<a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a>深以為然。\r\n\r\n<ol>\r\n  <li>使用後，程式碼有很高的可懂性</li>\r\n <li>容易使用來寫程式</li>\r\n</ol>\r\n\r\n基本上，這個工具可以讓開發者使用後端的 PHP 程式，來模擬前端 HTML Table 撰寫邏輯，來輸出 HTML Table。\r\n\r\n最後一點，是我自己使用一個 Open Source 最重要的依據，就是他的原始碼，簡單易懂，容易修改。\r\n\r\n下面是使用範例：\r\n[php]\r\n&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;\r\n&lt;?php\r\n require_once(&quot;..\\util\\\\table.php&quot;);\r\n  \r\n  $html = &quot;&quot;;\r\n $tb = new Table(''class=center'');\r\n  $html .= $tb-&gt;row(''center'');\r\n $html .= $tb-&gt;cell(''colspan=2|valign=bottom'', ''I span two cells.''); \r\n $html .= $tb-&gt;row(''center'');\r\n $html .= $tb-&gt;cell(); \r\n $html .= ''I am a normal cell, and this text will still be contained within it.'';\r\n  $html .= $tb-&gt;close();\r\n \r\n  echo $html;\r\n \r\n?&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n[/php]\r\n\r\n看完上述範例程式，是不是感覺就像在寫 html 一樣，有種熟悉感，現在也很流行使用 DOM 等方式來使用，可是 <a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a> 覺得 DOM 對要分析 HTML 資料是比較方便，可是如只是要單純輸出 HTML 的來說，就有點太複雜了。\r\n\r\n有興趣的讀者可以去<a href="http://www.php-ease.com/classes/table.html" title="官方網站" target="_blank">官方網站</a> 下載使用', 1, 'watson', '2012-10-27 15:03:34', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(13, 'PHP', 'PHP - 陣列', 'php 是一種弱定議的語言，也就是 他的變數定義比較寬鬆，可以後面要用時在隨時定義， 這帶來一些好處，但相對也帶來一些麻煩。', 'php 是一種弱定議的語言，也就是 他的變數定義比較寬鬆，可以後面要用時在隨時定義，這也是一種雙利劍，\r\n會帶來一些好處，但相對也帶來一些麻煩。\r\n\r\n像<a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a> 就常常，在撰寫的時候發生 錯誤，搞了半天，才發現，在程式中間有各地方 有改寫變數的值，讓他產生型態的轉換了，比如說原本是字串形態的，不小心用成 數字型態，所以像是 function 函數的回傳值，都要小心確認其形態才行。\r\n\r\n所以 建議 讀者，變數在使用時，千萬不要偷懶，盡量要集中在 一個地方中來定義使用，方便後面的追蹤除錯，否則一段程式寫了一兩百行以上，你要在上下來比對變數，哪理有引用問題，就很麻煩了。\r\n\r\n\r\n下面有幾種陣列的使用方式。\r\n<ul>\r\n <li>直接宣告，所有變數<br>\r\n            $array = array(1, 2, 3, 4, 5);\r\n            <br></li>\r\n  <li>先不定義陣列大小，需要時在動態增加<br>\r\n            $array[] = 7;\r\n            $array[] = 8;\r\n            這種方式，陣列索引會自動從最後一個索引來在往後增加，像上述，會等同下列定義方式<br>\r\n            $array[0] = 7;\r\n            $array[1] = 8;\r\n            <br></li>\r\n <li>定義索引的值<br>\r\n            $country=array("tw"=>"台灣","us"=>"美國","jp"=>"日本","cn"=>"中國");\r\n            $country["tw"] = "taiwan";\r\n            <br></li>\r\n <li>取得陣列的大小<br>\r\n            $country=array("tw"=>"台灣","us"=>"美國","jp"=>"日本","cn"=>"中國");\r\n            $len = count($field);  // $len = 4\r\n            <br></li>\r\n</ul>\r\n\r\n像上述這種 弱定義 的陣列，可以很方便讓我們在動態新增陣列的值，如在 .Net 要實現這種方式，就還需要 ArayList 等 class 來協助，\r\n當然就像上述，這如果沒有好的使用習慣，後面在偵錯上，會造成大災難的。\r\n\r\n下面 介紹一個蠻實用的應用實例，取得table 的所有欄位名稱：\r\n[php]\r\n    function get_Fields($tablename)\r\n    {\r\n    $res = mysql_list_fields($this-&gt;dbname, $tablename, $this-&gt;_dbConn);\r\n    if($res &gt; 0)\r\n   {\r\n     $items = array();\r\n\r\n     $i = 0;\r\n     $length = $field = mysql_num_fields( $res );\r\n      while ($i &lt; $length) {\r\n       $field = mysql_field_name($res, $i++);\r\n        $items[] = $field; \r\n     }\r\n     \r\n      return $items;\r\n    }\r\n    } \r\n[/php]\r\n\r\n上面程式，有一個地方可以注意到，就是 $items = array();\r\n這行按上述，其實也是可以 不用寫，程式也是能運作的，\r\n但一個好的使用習慣，在後面程式的穩定性會帶來很多好處，也就是在使用變數前，要注意先宣告變數，\r\n這樣做，可以確定 $items 在該函數中，使用前，會被初始化，也就能確保該變數的值是空的。', 2, 'watson', '2012-10-27 07:32:47', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(14, 'ASP.NET', 'ASP.NET動態增加控件 應用篇(二)', '此篇，是 前篇 應用篇(一）的延續，也是進階版。在本篇中使用一個aspx 檔案來同時實現，資料清單的顯示以及資料編輯同在一起的示範。', '此篇，是前篇 <a href="http://o4u.tw/WebDoc.php?DocNum=15" target="_blank">ASP.NET動態增加控件 應用篇(一)</a> 的延續，也是進階版。在本篇中使用一個aspx 檔案來同時實現，資料清單的顯示以及資料編輯同在一起的示範。\r\n\r\n當然，資料字段少的時候，可以直接 使用 GridView 就直接實現，但在字段多的時候，或是編輯畫面要求複雜時，這時在使用 GridView 就感覺很麻煩了。\r\n\r\n在本篇中 會使用 幾個程式相關檔案，分別是，\r\n\r\ntest5.aspx 主頁面\r\n\r\nMyBase5.aspx.cs 基底程式\r\n\r\nCustomer 類，Value Object\r\n\r\ntest5.xml 用來儲存示範資料\r\n\r\n詳細介紹如下：\r\n\r\n\r\n在 MyBase5 中有各重點就是，一開始控件，要在 Init 時就要全部產生出來，當然這是各偷懶的行為，讀者 有興趣，可以 再去嘗試判斷頁面狀態，來決定來些要產生 哪些不產生。\r\n\r\n在這個程式中還有各要注意的地方，就是 sourceTag(編輯頁面) 跟 GridView1(主頁面) 的顯示控制，一開始 需先將 sourceTag 隱藏，因為本頁面，user 無任何操作一進來要看到的頁面是 GridView1，sourceTag 是進來頁面後 視操作的結果來決定是否顯示的。\r\n\r\nMyBase5.aspx.cs\r\n[csharp]\r\n using System;\r\n using System.Data;\r\n using System.Collections;\r\n using System.Web.UI;\r\n using System.Web.UI.WebControls;\r\n using System.Web.UI.HtmlControls;\r\n using System.Text;\r\n using System.Configuration;\r\n \r\n public class MyBase5 : System.Web.UI.Page{\r\n \r\n     protected GridView GridView1;\r\n     protected HtmlGenericControl sourceTag;\r\n     protected Button btnSubmit;\r\n \r\n     protected override void OnInit(EventArgs e)\r\n     {\r\n         base.OnInit(e);\r\n         HtmlGenericControl msgTag = new HtmlGenericControl();\r\n         msgTag.ID = &quot;divMsg&quot;;\r\n         sourceTag.Controls.Add(msgTag);\r\n \r\n         Button btnSave = new Button();\r\n         btnSave.Click += new EventHandler(btnSave_Click);\r\n         btnSave.Text = &quot;儲存&quot;;\r\n         sourceTag.Controls.Add(btnSave);\r\n \r\n         Button btnMain = new Button();\r\n         btnMain.Click += new EventHandler(btnMain_Click);\r\n         btnMain.Text = &quot;回主頁面&quot;;\r\n         sourceTag.Controls.Add(btnMain);\r\n \r\n         Table myTable = new Table();\r\n         sourceTag.Controls.Add(myTable);\r\n         dealTableData(myTable);\r\n         sourceTag.Visible = false;\r\n \r\n         GridView1.RowEditing += new GridViewEditEventHandler(GridView1_RowEditing);\r\n     }\r\n     protected override void OnLoad(EventArgs e)\r\n     {\r\n         base.OnLoad(e);\r\n \r\n         if (!IsPostBack)\r\n         {\r\n             DataBind();\r\n         }\r\n     }\r\n \r\n     public virtual void DataBind()\r\n     {\r\n \r\n     }\r\n     protected void GridView1_RowEditing(object sender, GridViewEditEventArgs e)\r\n     {\r\n         try\r\n         {\r\n             Object myObj = GetGridData(e.NewEditIndex);\r\n             if (myObj != null)\r\n             {\r\n                 ShowEditData(myObj);\r\n                 Customer myCus = (Customer)myObj;\r\n                 sourceTag.Visible = true;\r\n                 GridView1.Visible = false;\r\n             }\r\n         }\r\n         catch (Exception ex)\r\n         {\r\n             ShowMessage(ex.ToString());\r\n         }\r\n     }\r\n     //取得 GridView 特定列的資料\r\n     public virtual Object GetGridData(int EditIndex)\r\n     {\r\n         return null;\r\n     }\r\n     //生成編輯畫面的控件\r\n     public virtual void dealTableData(Table myTable)\r\n     {\r\n \r\n     }\r\n     //設定編輯畫面控件的預設值\r\n     public virtual void ShowEditData(Object fVObj)\r\n     {\r\n \r\n     }\r\n     //儲存 按鍵觸發後的處裏\r\n     public virtual void btnSave_Click(Object sender, EventArgs e)\r\n     {\r\n     }\r\n     //回主頁面 按鍵觸發後的處裏\r\n     public virtual void btnMain_Click(Object sender, EventArgs e)\r\n     {\r\n         sourceTag.Visible = false;\r\n         GridView1.Visible = true;\r\n         GridView1.EditIndex = -1;\r\n         DataBind();\r\n     }\r\n     public virtual void ShowMessage(string msg)\r\n     {\r\n         HtmlGenericControl msgTag = (HtmlGenericControl)sourceTag.FindControl(&quot;divMsg&quot;);\r\n         LiteralControl lc;\r\n         lc = new LiteralControl(msg + &quot;&lt;br&gt;&quot;);\r\n         msgTag.Controls.Add(lc);\r\n     }\r\n }\r\n[/csharp]\r\n\r\n而在 test5.aspx 跟 前篇用途是一樣的，在此篇中主要是多一個 GridView 的處理 所以 變複雜一點\r\n\r\ntest5.aspx\r\n[csharp]\r\n &lt;%@ Page aspcompat=&quot;true&quot; language=&quot;C#&quot; EnableEventValidation=&quot;false&quot; explicit=&quot;true&quot; src=&quot;./myBase5.aspx.cs&quot; Inherits=&quot;MyBase5&quot;%&gt;\r\n &lt;%@ import namespace=&quot;System.Data&quot; %&gt;\r\n &lt;%@ import namespace=&quot;System.Data.SqlClient&quot; %&gt;\r\n \r\n    &lt;script language=&quot;C#&quot; runat=server&gt;\r\n \r\n     public override void DataBind()\r\n     {\r\n         DataSet d = new DataSet();\r\n         d.ReadXml(Server.MapPath(&quot;test5.xml&quot;));\r\n         GridView1.DataSource = d.Tables[0];\r\n         GridView1.DataBind();\r\n     }\r\n \r\n     public override Object GetGridData(int EditIndex)\r\n     {\r\n         int i = 1;\r\n         Customer myCus = new Customer();\r\n         GridViewRow row = GridView1.Rows[EditIndex];\r\n         myCus.客戶編號 = row.Cells[i++].Text;\r\n         myCus.聯絡人 = row.Cells[i++].Text;\r\n         myCus.電話 = row.Cells[i++].Text;\r\n         myCus.傳真 = row.Cells[i++].Text;\r\n         return myCus;\r\n     }       \r\n     public override void dealTableData(Table myTable)\r\n     {\r\n         TxtItem ti;\r\n \r\n         cusTable myCT = new cusTable(myTable);\r\n \r\n         myCT.AddRow();\r\n         ti = new TxtItem(&quot;txCardCode&quot;, &quot;客戶編號：&quot;);\r\n         myCT.AddEditControl(ti);\r\n         ti = new TxtItem(&quot;txContact&quot;, &quot;聯絡人：&quot;);\r\n         myCT.AddEditControl(ti);\r\n \r\n         myCT.AddRow();\r\n         ti = new TxtItem(&quot;txPhone&quot;, &quot;電話：&quot;);\r\n         myCT.AddEditControl(ti);\r\n         ti = new TxtItem(&quot;txFax&quot;, &quot;傳真：&quot;);\r\n         myCT.AddEditControl(ti);\r\n     }\r\n     public override void ShowEditData(Object fVObj)\r\n     {\r\n         Customer myCus = (Customer)fVObj;\r\n         TextBox tb;\r\n         string s = &quot;&quot;;    \r\n         tb = (TextBox)sourceTag.FindControl(&quot;txCardCode&quot;);\r\n         tb.Text = myCus.客戶編號;\r\n         tb = (TextBox)sourceTag.FindControl(&quot;txContact&quot;);\r\n         tb.Text = myCus.聯絡人;\r\n         tb = (TextBox)sourceTag.FindControl(&quot;txPhone&quot;);\r\n         tb.Text = myCus.電話;\r\n         tb = (TextBox)sourceTag.FindControl(&quot;txFax&quot;);\r\n         tb.Text = myCus.傳真;\r\n \r\n     }\r\n     public override void btnSave_Click(Object sender, EventArgs e)\r\n     {\r\n         TextBox tb;\r\n         string s = &quot;&quot;;\r\n         tb = (TextBox)sourceTag.FindControl(&quot;txCardCode&quot;);\r\n         s += tb.Text;\r\n         tb = (TextBox)sourceTag.FindControl(&quot;txContact&quot;);\r\n         s += &quot;,&quot; + tb.Text;\r\n         tb = (TextBox)sourceTag.FindControl(&quot;txPhone&quot;);\r\n         s += &quot;,&quot; + tb.Text;\r\n         tb = (TextBox)sourceTag.FindControl(&quot;txFax&quot;);\r\n         s += &quot;,&quot; + tb.Text;\r\n \r\n         ShowMessage(s);\r\n     }\r\n    &lt;/script&gt;\r\n &lt;html&gt;\r\n &lt;head&gt;\r\n     &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\r\n &lt;/head&gt;\r\n &lt;body&gt;\r\n    &lt;form runat=&quot;server&quot;&gt;\r\n \r\n       &lt;h3&gt;動態增加控件 應用篇(二)&lt;/h3&gt;\r\n        \r\n       &lt;p&gt;\r\n         &lt;asp:GridView ID=&quot;GridView1&quot; runat=&quot;server&quot;&gt;        \r\n         &lt;Columns&gt;\r\n             &lt;asp:CommandField HeaderText=&quot;編輯&quot; ShowEditButton=&quot;True&quot; /&gt;\r\n         &lt;/Columns&gt;\r\n         &lt;/asp:gridview&gt;\r\n       &lt;div id=&quot;sourceTag&quot;  runat=&quot;server&quot;&gt;\r\n       &lt;/div&gt;\r\n       &lt;p&gt;\r\n       一條小龍\r\n    &lt;/form&gt;\r\n &lt;/body&gt;\r\n &lt;/html&gt;\r\n[/csharp]\r\n\r\nCustomer\r\n[csharp]\r\n public class Customer\r\n {\r\n     public string 客戶編號;\r\n     public string 聯絡人;\r\n     public string 電話;\r\n     public string 傳真;\r\n \r\n     public Customer()\r\n     {\r\n     }\r\n }\r\n[/csharp]\r\n\r\ntest5.xml\r\n[csharp]\r\n &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\r\n &lt;customers&gt;\r\n   &lt;customer&gt;\r\n     &lt;客戶編號&gt;一條小龍&lt;/客戶編號&gt;\r\n     &lt;聯絡人&gt;大龍&lt;/聯絡人&gt;\r\n     &lt;電話&gt;123456780&lt;/電話&gt;\r\n     &lt;傳真&gt;123456710&lt;/傳真&gt;\r\n   &lt;/customer&gt;\r\n   &lt;customer&gt;\r\n     &lt;客戶編號&gt;一條小龍分公司&lt;/客戶編號&gt;\r\n     &lt;聯絡人&gt;小龍&lt;/聯絡人&gt;\r\n     &lt;電話&gt;123456789&lt;/電話&gt;\r\n     &lt;傳真&gt;123456711&lt;/傳真&gt;\r\n   &lt;/customer&gt;\r\n &lt;/customers&gt;\r\n[/csharp]\r\n\r\n\r\n執行時的主畫面如下：\r\n<a href="http://o4u.tw/blogImgs/2011113017104335.png"><img src="http://o4u.tw/blogImgs/2011113017104335.png" alt="" title="2011113017104335" width="365" height="191" class="alignnone size-full wp-image-60" /></a>\r\n\r\n點選編輯，跳至如下畫面，點選回主頁面，在回到上一個頁面\r\n<a href="http://o4u.tw/blogImgs/2011113017110088.png"><img src="http://o4u.tw/blogImgs/2011113017110088.png" alt="" title="2011113017110088" width="534" height="188" class="alignnone size-full wp-image-61" /></a>', 1, 'watson', '2012-10-24 18:06:00', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(15, 'ASP.NET', 'ASP.NET動態增加控件 應用篇(一)', '在寫了這麽多篇後，相信讀者 應該 對於 動態控件 有一定的認識，下面 來介紹 藉由動態產生控件來產生，一般企業 常用的表單  目前動態控件的使用上依我經驗是比較適合用在，制式表單上，也就是格式、風格很類似的表單上，像是公司常用的請假單、出差單、銷售訂單、采購訂單 等等單據類。', '如讀者有讀過 <a href="http://o4u.tw" title="一條小龍" target="_blank">一條小龍</a> 在前面寫的<a href="http://o4u.tw/WebDoc.php?DocNum=16" target="_blank">ASP.NET動態增加控件 繼承篇</a>、<a href="http://o4u.tw/WebDoc.php?DocNum=17" target="_blank">ASP.NET 動態加載控件 JavaScript 篇</a>、<a href="http://o4u.tw/WebDoc.php?DocNum=18" target="_blank">ASP.NET 動態增加控件 Event 篇</a>、<a href="http://o4u.tw/WebDoc.php?DocNum=19" target="_blank">ASP.NET 動態加載控件 基礎篇</a> 等，相信讀者 應該 對於 動態控件 有一定的認識，下面 來介紹 藉由動態產生控件來產生，一般企業 常用的表單\r\n\r\n目前動態控件的使用上依我經驗是比較適合用在，制式表單上，也就是格式、風格很類似的表單上，像是公司常用的請假單、出差單、銷售訂單、采購訂單 等等單據類。\r\n\r\n首先，先新增 MyBase 這各類，這各類的用途，同前篇的介紹，主要在封裝一些 函式，目的在讓 後面繼承者，只需考慮 介面、處理介面上使用者所輸入的值，而整各網頁的架構，都會在 MyBase 中設定好，藉以實現 我前面所說，制定開發標准的目的\r\n\r\nMyBase.aspx.cs\r\n[csharp]\r\nusing System;\r\nusing System.Data;\r\nusing System.Collections;\r\nusing System.Web.UI;\r\nusing System.Web.UI.WebControls;\r\nusing System.Web.UI.HtmlControls;\r\nusing System.Text;\r\nusing System.Configuration;\r\n\r\npublic class MyBase : System.Web.UI.Page{\r\n\r\n    protected HtmlGenericControl sourceTag;\r\n    protected Button btnSubmit;\r\n\r\n    protected override void OnInit(EventArgs e)\r\n    {\r\n        base.OnInit(e);\r\n        HtmlGenericControl msgTag = new HtmlGenericControl();\r\n        msgTag.ID = &quot;divMsg&quot;;\r\n        sourceTag.Controls.Add(msgTag);\r\n\r\n        Button btnSubmit = new Button();\r\n        btnSubmit.Click += new EventHandler(SubmitBtn_Click);\r\n        btnSubmit.Text = &quot;SAVE&quot;;\r\n        sourceTag.Controls.Add(btnSubmit);\r\n\r\n        Table myTable = new Table();\r\n        sourceTag.Controls.Add(myTable);\r\n        dealTableData(myTable);\r\n    }\r\n\r\n    public virtual void dealTableData(Table myTable)\r\n    {\r\n\r\n    }\r\n    public virtual void SubmitBtn_Click(Object sender, EventArgs e)\r\n    {\r\n    }\r\n    public virtual void ShowMessage(string msg)\r\n    {\r\n        HtmlGenericControl msgTag = (HtmlGenericControl)sourceTag.FindControl(&quot;divMsg&quot;);\r\n        LiteralControl lc;\r\n        lc = new LiteralControl(msg + &quot;&lt;br&gt;&quot;);\r\n        msgTag.Controls.Add(lc);\r\n    }\r\n}\r\n[/csharp]\r\n\r\n再來，會新增兩各公用類，cusTable, TxtItem，為了讓讀者能快速看到程式執行結果，這兩各類，可以 先放到 MyBase.aspx.cs 這裏面，就不用預先編譯，就能向前篇一樣，直接就能看到 程式結果，這樣 也方便 讀者 能直接 測試、修改，來了解其中程式碼。\r\n\r\nCusTable 是為了來幫助動態 產生 控件使用的一個類，他封裝了動態產生的重複使用的程式碼，使其更容易被呼叫使用。\r\n\r\nTxtItem 是一個 Value Object 用來存取，產生 控件 所需要設定的參數。一般參數傳遞，都是在函數介面中定義所需參數，但一旦這函數用多了以後，想要再去調整，這工程就很大了。\r\n\r\n而改用 Value Object 這樣做就可以將所需參數全部封裝在裏面，既使後面有需調整參數，也不需去修改介面，另一各好處是，可以藉由該 Object 來規範參數的值，該如何設定，例如 Width 如只能在 1-100 間設定，就可以像如下程式一般來規範。\r\n\r\n[csharp]\r\npublic int TitleWidth\r\n{\r\n    get\r\n    {\r\n        return _TitleWidth;\r\n    }\r\n    set\r\n    {\r\n        if(value &lt; 0)\r\n            _TitleWidth = 0;\r\n        else if (value &gt; 100)\r\n            _TitleWidth = 100;\r\n        else\r\n            _TitleWidth = value;\r\n    }\r\n}\r\n[/csharp]\r\n\r\n在這同時，我們藉由 這兩各 類，就也能規範，使用者 畫面產生的 方式 跟標准，可以 讓 每各開發者，開發出來的介面都有著相似的外觀跟特性。\r\n\r\n這讓我想到，我之前 User 最常在講，為什麽你們團隊 開發出來的畫面，都不太一樣，有的 靠左對齊，有的是 置中，等等，作為一個管理者，想管好這些，老是靠 文件規範、人工測試等等，都是很吃力的事情，而且會疏失...\r\n\r\n[csharp]\r\npublic class cusTable\r\n{\r\n    Table myTable;\r\n    TableRow tr;\r\n\r\n    public cusTable(Table fTable)\r\n    {\r\n        myTable = fTable;\r\n        tr = null;\r\n    }\r\n\r\n    public void AddEditControl(TxtItem ti)\r\n    {\r\n        AddLabel(ti.Caption, ti.TitleWidth);\r\n        AddTextBox(ti);\r\n    }\r\n\r\n    public TextBox AddTextBox(TxtItem ti)\r\n    {\r\n        TextBox tb = new TextBox();\r\n        tb.ID = ti.ID;\r\n        tb.Text = ti.Value;\r\n        AddControl(tb, ti.EditWidth);\r\n        return tb;\r\n    }\r\n    public Label AddLabel(string title, int width)\r\n    {\r\n        Label lb = new Label();\r\n        lb.Text = title;\r\n        AddControl(lb, width);\r\n        return lb;\r\n    }\r\n    public Button AddButton(TxtItem ti)\r\n    {\r\n        Button btn = new Button();\r\n        btn.ID = ti.ID;\r\n        btn.Text = ti.Caption;\r\n        AddControl(btn, ti.EditWidth);\r\n        return btn;\r\n    }\r\n\r\n    public TableCell AddControl(Control ctrl, int width)\r\n    {\r\n        TableCell tc = new TableCell();\r\n        tc.Controls.Add(ctrl);\r\n        tc.Width = Unit.Percentage(width);\r\n        tr.Cells.Add(tc);\r\n        return tc;\r\n    }\r\n\r\n    public TableRow AddRow()\r\n    {\r\n        tr = new TableRow();\r\n        myTable.Rows.Add(tr);\r\n        return tr;\r\n    }\r\n}\r\n\r\npublic class TxtItem\r\n{\r\n    private string _Caption;\r\n    private string _ID;\r\n    private string _Value;\r\n    private int _TitleWidth;\r\n    private int _EditWidth;\r\n\r\n    public TxtItem(string fID, string fCaption)\r\n    {\r\n        Caption = fCaption;\r\n        ID = fID;\r\n        Value = &quot;&quot;;\r\n        EditWidth = 35;\r\n        TitleWidth = 15;\r\n    }\r\n\r\n    public string Caption\r\n    {\r\n        get\r\n        {\r\n            return _Caption;\r\n        }\r\n        set\r\n        {\r\n            _Caption = value;\r\n        }\r\n    }\r\n\r\n    public string ID\r\n    {\r\n        get\r\n        {\r\n            return _ID;\r\n        }\r\n        set\r\n        {\r\n            _ID = value;\r\n        }\r\n    }\r\n\r\n    public string Value\r\n    {\r\n        get\r\n        {\r\n            return _Value;\r\n        }\r\n        set\r\n        {\r\n            _Value = value;\r\n        }\r\n    }\r\n    public int TitleWidth\r\n    {\r\n        get\r\n        {\r\n            return _TitleWidth;\r\n        }\r\n        set\r\n        {\r\n            _TitleWidth = value;\r\n        }\r\n    }\r\n    public int EditWidth\r\n    {\r\n        get\r\n        {\r\n            return _EditWidth;\r\n        }\r\n        set\r\n        {\r\n            _EditWidth = value;\r\n        }\r\n    }\r\n}\r\n[/csharp]\r\n\r\n最後 就是 主頁面的制作，大家可以 看到 主頁面 變得 很有規範 跟 整齊...，為什麼 會強調 整齊 這兩各字勒，嗯嗯，這還有點難解釋，這樣說吧，整齊的 Code ，有控制的斷行、縮排等等，會讓程式看起來比較清爽，這對 後面的 維護 會很有幫助，基本上，寫得好得程式，本身 就是 一個好的文章，容易閱讀，也不需要加太多注解。\r\n\r\n像我的原則是，能用最基本、簡單的方式 來完成，我就不要用新的東西來完成， 當然這也不是說不要學新技術，好的技術還是應該 要去了解一下，進而改善自己原先的技能，就好像我現在還蠻喜歡 ASP.NET 因為他跟我原來的設計思維很接近。\r\n但是說實在的，現在技術 推陳出新的太快了，常常現行技術都還不是很熟悉，就又出來一個新技術 要取代了，那真是OOXX，而問題是，現行技術都用的好好的，開發上也沒啥問題，那幹麼要換一個技術來使用勒，說到底都是商人要賺錢 ... 。\r\n而且我說的 這種方式 來帶來一個好處，就是一旦你有機會去使用其程式語言時，你會發現你之前用的技巧，都還能繼續使用，不會全部 要重頭來過。 \r\n\r\n \r\n\r\n在下面程式碼中開發人員只需作兩件事情，\r\n\r\n<ol>\r\n <li>定義各輸入控件相對的位置，而控件實際的位置則是由我前面的 CusTable 以及 MyBase 中來定義的，如此一來自然就能讓系統都有一致的風格跟規範了。</li>\r\n  <li>抓取使用者輸入的值，傳給 MyBase 來作處理，然後 MyBase 可以將值 顯示 出來、也可以新增、更新DataBase 等等，讀者後續都可加以運用來改寫加強。</li>\r\n\r\n</ol>\r\n\r\ntest.aspx 主頁面\r\n[csharp]\r\n &lt;%@ Page aspcompat=&quot;true&quot; language=&quot;C#&quot; EnableEventValidation=&quot;false&quot; explicit=&quot;true&quot; src=&quot;./myBase.aspx.cs&quot; Inherits=&quot;MyBase&quot;%&gt;\r\n \r\n    &lt;script language=&quot;C#&quot; runat=server&gt;\r\n \r\n     public override void dealTableData(Table myTable)\r\n     {\r\n         TxtItem ti;\r\n \r\n         cusTable myCT = new cusTable(myTable);\r\n         \r\n         myCT.AddRow();\r\n         ti = new TxtItem(&quot;txCardCode&quot;, &quot;客戶編號：&quot;);\r\n         myCT.AddEditControl(ti);\r\n         ti = new TxtItem(&quot;txContact&quot;, &quot;聯絡人：&quot;);\r\n         myCT.AddEditControl(ti);\r\n \r\n         myCT.AddRow();\r\n         ti = new TxtItem(&quot;txPhone&quot;, &quot;電話：&quot;);\r\n         myCT.AddEditControl(ti);\r\n         ti = new TxtItem(&quot;txFax&quot;, &quot;傳真：&quot;);\r\n         myCT.AddEditControl(ti);\r\n     }\r\n \r\n     public override void SubmitBtn_Click(Object sender, EventArgs e)\r\n     {\r\n         TextBox tb;\r\n         string s = &quot;&quot;;\r\n         tb = (TextBox)sourceTag.FindControl(&quot;txCardCode&quot;);\r\n         s += tb.Text;\r\n         tb = (TextBox)sourceTag.FindControl(&quot;txContact&quot;);\r\n         s += &quot;,&quot;+ tb.Text;\r\n         tb = (TextBox)sourceTag.FindControl(&quot;txPhone&quot;);\r\n         s += &quot;,&quot; + tb.Text;\r\n         tb = (TextBox)sourceTag.FindControl(&quot;txFax&quot;);\r\n         s += &quot;,&quot; + tb.Text;\r\n         \r\n         ShowMessage(s);\r\n     }\r\n    &lt;/script&gt;\r\n &lt;html&gt;\r\n &lt;head&gt;\r\n     &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\r\n &lt;/head&gt;\r\n &lt;body&gt;\r\n    &lt;form id=&quot;Form1&quot; runat=&quot;server&quot;&gt;\r\n \r\n       &lt;h3&gt;動態增加控件 應用篇(一)&lt;/h3&gt;\r\n        \r\n       &lt;p/&gt;\r\n       &lt;div id=&quot;sourceTag&quot;  runat=&quot;server&quot;&gt;\r\n       &lt;/div&gt;\r\n       &lt;p/&gt;\r\n       一條小龍\r\n    &lt;/form&gt;\r\n &lt;/body&gt;\r\n &lt;/html&gt;\r\n[/csharp]\r\n\r\n执行画面\r\n\r\n<a href="http://o4u.tw/blogImgs/2011112916102040.png"><img src="http://o4u.tw/blogImgs/2011112916102040.png" alt="" title="2011112916102040" width="534" height="198" class="alignnone size-full wp-image-56" /></a>\r\n\r\n在本篇讀者 已經能看到一個 動態產生控件的基本架構，後面 會在<a href="http://o4u.tw/WebDoc.php?DocNum=14" target="_blank">ASP.NET動態增加控件 應用篇(二)</a> 中逐一探討，來充實這個架構', 1, 'watson', '2012-10-24 17:55:01', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(16, 'ASP.NET', 'ASP.NET動態增加控件 繼承篇', '隨著後面要講得東西越來越深，這邊文章內容以及程式碼，也變得越來越多，但這卻違背我原來想要用淺顯易懂的方式來讓大家瞭解的初衷，但讀者請放心，我還是會盡量用最精簡的方式來說明的。  繼承的好處，這裏不多說，本篇文章，主要是 示範，如何使用 ASP.NET 來作到畫面控件的繼承。', '隨著後面要講得東西越來越深，這邊文章內容以及程式碼，也變得越來越多，但這卻違背我原來想要用淺顯易懂的方式來讓大家瞭解的初衷，但讀者請放心，<a href="http://o4u.tw" target="_blank">一條小龍</a> 還是會盡量用最精簡的方式來說明的。\r\n\r\n繼承的好處，這裏不多說，本篇文章，主要是 示範，如何使用 ASP.NET 來作到畫面控件的繼承。\r\n\r\n一般常見的繼承是用來改寫ASP.NET 既有的控件，而我最常用不是這方面，而是用來規範網頁標準開發流程，另一方面是用來減少<a href="http://o4u.tw" target="_blank">一條小龍</a> 的程式碼，上述兩方面最終目的，其實都是為了未來減少系統維護的困難度。\r\n\r\n規範標準流程，在多人共同開發上，尤顯其重要性，否則有維護過他人程式的人，都知道每各開發者，都有其風格，你光要瞭解每個人的風格就要花很多時間了，最麻煩的還是，每個人 開發風格，還會隨著他的成長 來變化，這等於你每接收一隻程式，不管是不是同一人，都要重新 瞭解一次開發風格，其中所需成本可想而知。\r\n\r\n在這邊程式中有使用 deal_Button_Click 這個函式，這就是一種開發流程的規範，因為我們基底程式已經寫好必要流程，後面要繼承的人，就只能照我們的基底流程來開發，如此一來，如此我們就可以 藉由這種方式，來強迫後面使用的人，一定要用這個方式來開發。\r\n\r\n而減少程式碼這個道理 也是顯而易見的，這個開發模式，就<a href="http://o4u.tw" target="_blank">一條小龍</a>  本身經驗來看，在使用時，並不用想的太困難，尤其是想要一開始 就要想的很清楚，這都是很困難，反而造成使用這種開發模式的阻礙，我個人建議讀者在使用時，最簡單的方式，其實就是一直不斷的整裡手中的程式碼，把共通的部份集合起來，先能達成減少程式碼的目的就可以了，能減少程式碼，就能吸引其他開發人員一起使用，大家在一起不斷去討論、精進就可以了。\r\n\r\n上述的方式，當然只是用一個簡要的方式，讓讀者容易瞭解，在一般大案子中，還是需要資深人員，先規劃架構以及定義相關計畫，來進行開發的，這些都有很多很深奧的理論，在討論了，也不需要<a href="http://o4u.tw" target="_blank">一條小龍</a>  在這來畫蛇添足。\r\n\r\nJS_Demo2Base.aspx.cs\r\n[csharp]\r\nusing System;\r\nusing System.Data;\r\nusing System.Collections;\r\nusing System.Web.UI;\r\nusing System.Web.UI.WebControls;\r\nusing System.Web.UI.HtmlControls;\r\nusing System.Text;\r\n\r\npublic class JSDemoBase : System.Web.UI.Page{\r\n\r\n    protected HtmlGenericControl sourceTag;\r\n    protected Button _myBtn;\r\n    protected TextBox _myTB;\r\n\r\n    protected override void OnInit(EventArgs e)\r\n    {\r\n        base.OnInit(e);\r\n\r\n        Label message = new Label();\r\n        message.ID = &quot;請輸入你要說的話&quot;;\r\n        sourceTag.Controls.Add(message);\r\n\r\n        _myTB = new TextBox();\r\n        _myTB.ID = &quot;input&quot;;\r\n        //input.Text = val;\r\n        sourceTag.Controls.Add(_myTB);\r\n\r\n        _myBtn = new Button();\r\n        _myBtn.ID = &quot;btnSayHello&quot;;\r\n        _myBtn.Text = &quot;SayHello&quot;;\r\n        sourceTag.Controls.Add(_myBtn);\r\n\r\n        string val = Request.QueryString.Get(&quot;val&quot;);\r\n        deal_Button_Click(val);\r\n    }\r\n\r\n    public virtual void deal_Button_Click(string value)\r\n    {\r\n    }\r\n\r\n    public Button btnSayHello\r\n    {\r\n        get\r\n        {\r\n            return _myBtn;\r\n        }\r\n    }\r\n    public TextBox input\r\n    {\r\n        get\r\n        {\r\n            return _myTB;\r\n        }\r\n    }\r\n}\r\n[/csharp]\r\n\r\n在寫基底程式時，如有引用asp.net 上的 server 端控件，請記得要在程式一開始就要先定義(ID、Type 都要一致)，如上述程式中的 sourceTag。這樣一來就可以程式中來直接使用該控件，就像我們原來 asp.net 程式一般。\r\n\r\n\r\nJS_Demo2.aspx\r\n[csharp]\r\n&lt;%@ Page Language=&quot;C#&quot; src=&quot;./JS_Demo2Base.aspx.cs&quot; Inherits=&quot;JSDemoBase&quot; %&gt;\r\n\r\n   &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\r\n       \r\n       \r\n    public override void deal_Button_Click(string value)\r\n    {\r\n        input.Text = value;\r\n        if (value != &quot;&quot; &amp;&amp; value != null)\r\n            btnSayHello.Attributes.Add(&quot;OnClick&quot;, &quot;return SetValue(&quot; + input.ClientID + &quot;);&quot;);\r\n        else\r\n            btnSayHello.Attributes.Add(&quot;OnClick&quot;, &quot;return GetOtherValue(&quot; + input.ClientID + &quot;);&quot;);\r\n    }\r\n\r\n   &lt;/script&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n &lt;script type = &quot;text/javascript&quot;&gt;\r\n     var myInput;\r\n     function GetOtherValue(ctrl) {\r\n         myInput = ctrl;\r\n         var hWnd = window.open(&quot;JS_Demo.aspx?val=&quot; + ctrl.value, &quot;_blank&quot; );\r\n         if ((document.window != null) &amp;&amp; (!hWnd.opener))\r\n             hWnd.opener = document.window;\r\n         return false;\r\n     }\r\n     function SetValue(ctrl) {\r\n         window.opener.myInput.value = &quot;Re: &quot; + ctrl.value;\r\n         return false;\r\n     }\r\n&lt;/script&gt;\r\n   &lt;form runat=&quot;server&quot;&gt;\r\n\r\n      &lt;h3&gt;動態增加控件 繼承篇&lt;/h3&gt;\r\n       \r\n      &lt;p/&gt;\r\n      &lt;div id=&quot;sourceTag&quot;  runat=&quot;server&quot;&gt;\r\n      &lt;/div&gt;\r\n      &lt;p/&gt;\r\n      一條小龍\r\n   &lt;/form&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n[/csharp]\r\n', 1, 'watson', '2012-10-24 17:35:20', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(17, 'ASP.NET', 'ASP.NET 動態加載控件 JavaScript 篇', '本篇 DEMO 一下，使用 動態控件 來增加 JavaScript 的功能，也就是在動態增加的控件上，動態指定要呼叫的 JavaScript 。', '因為平常 在做 互動網頁時，JavaScript 跟 ASP.NET 的互動 一定會 很頻繁\r\n今天這個範例 一方面demo 如何動態增加 JavaScript 在我門的控件上，\r\n一方面也示範 JavaScript 如何 跟 ASP.NET 互動中一個很基本的方式，下面 這範例 還蠻有趣的，\r\n\r\n\r\n一般要顯示這種互動的範例，他的程式碼都很長，但因為這次要用在網頁上，跟大家介紹，所以程式碼要精簡一點而且要有其實務上應用的價值才行，但不能太長，才能讓大家看到重點，但是要做互動效果一般都是要兩個ASP.NET 程式 比較好，所以這次<a href="http://o4u.tw" target="_blank">一條小龍</a> 也想了好一陣子才搞出來(覺得不錯的人，在文章下方，不要忘了幫<a href="http://o4u.tw" target="_blank">一條小龍</a> 按個讚分享一下喔)。\r\n \r\n\r\n以下程式是延續 上一篇<a href="http://o4u.tw/WebDoc.php?DocNum=18" target="_blank">ASP.NET 動態增加控件 Event 篇</a>，在其中的程式碼上，在加上 JavaScript 功能來另開一個網頁呼叫自己本身並傳遞 input 控件所輸入的值，在重新設定 button 所會觸發的 JavaScript 讓其可以回傳 input 的值到原網頁上。\r\n\r\n簡言之，本程式一人釋二角，有遞回使用的味道在裏面了，該程式也詮釋出一部份動態控件的精神和優勢，也就是互動控制，藉由外部使用者的設定、輸入等，來動態設定網頁的呈現與控制方式，這個在很多程式語言、網頁程式中都可看到類似精神，但 ASP.NET 最吸引人的地方，就是 可以用物件化的方式，來制作網頁。\r\n\r\n下面程式只是作一簡單的示範，讀者可在運用在客戶或是其他複雜選擇的選項上\r\n\r\nJS_Demo.aspx\r\n[csharp]\r\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\r\n\r\n   &lt;script language=&quot;C#&quot; runat=server&gt;\r\n    public void Page_Init(object sender, System.EventArgs e)\r\n    {\r\n        string val = Request.QueryString.Get(&quot;val&quot;);\r\n           \r\n        Label message = new Label();\r\n        message.ID = &quot;請輸入你要說的話&quot;;\r\n        sourceTag.Controls.Add(message);\r\n\r\n        TextBox input = new TextBox();\r\n        input.ID = &quot;input&quot;;\r\n        input.Text = val;\r\n        sourceTag.Controls.Add(input);\r\n\r\n        Button btnSayHello = new Button();\r\n        btnSayHello.ID = &quot;btnSayHello&quot;;\r\n        btnSayHello.Text = &quot;SayHello&quot;;\r\n        if(val != &quot;&quot; &amp;&amp; val != null)\r\n            btnSayHello.Attributes.Add(&quot;OnClick&quot;, &quot;return SetValue(&quot; + input.ClientID + &quot;);&quot;);\r\n        else\r\n            btnSayHello.Attributes.Add(&quot;OnClick&quot;, &quot;return GetOtherValue(&quot; + input.ClientID + &quot;);&quot;);\r\n        sourceTag.Controls.Add(btnSayHello);\r\n    }\r\n       \r\n    void SubmitBtn_Click(Object sender, EventArgs e) \r\n    {\r\n        TextBox input = (TextBox)sourceTag.FindControl(&quot;input&quot;);\r\n        LiteralControl lc;\r\n        lc = new LiteralControl(&quot;&lt;H3&gt;&quot; + input.Text + &quot;&lt;/H3&gt;&quot;);\r\n        sourceTag.Controls.Add(lc);\r\n    }\r\n\r\n   &lt;/script&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n &lt;script type = &quot;text/javascript&quot;&gt;\r\n     var myInput;\r\n     function GetOtherValue(ctrl) {\r\n         myInput = ctrl;\r\n         var hWnd = window.open(&quot;JS_Demo.aspx?val=&quot; + ctrl.value, &quot;_blank&quot; );\r\n         if ((document.window != null) &amp;&amp; (!hWnd.opener))\r\n             hWnd.opener = document.window;\r\n         return false;\r\n     }\r\n     function SetValue(ctrl) {\r\n         window.opener.myInput.value = &quot;Re: &quot; + ctrl.value;\r\n         return false;\r\n     }\r\n&lt;/script&gt;\r\n   &lt;form runat=&quot;server&quot;&gt;\r\n\r\n      &lt;h3&gt;動態加載控件 JavaScript 篇&lt;/h3&gt;\r\n       \r\n      &lt;p/&gt;\r\n      &lt;div id=&quot;sourceTag&quot;  runat=&quot;server&quot;&gt;\r\n      &lt;/div&gt;\r\n      &lt;p/&gt;\r\n      一條小龍\r\n   &lt;/form&gt;\r\n&lt;/body&gt;\r\n[/csharp]\r\n', 1, 'watson', '2012-10-24 16:54:08', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(18, 'ASP.NET', 'ASP.NET 動態增加控件 Event 篇', '這篇示範，動態增加頁面控件並設定回傳事件以及在事件中 取得 <strong>動態增加的控件</strong> 中輸入的值。', '這篇示範，動態增加頁面控件並設定回傳事件以及在事件中 取得 <strong>動態增加的控件</strong> 中輸入的值。\r\n\r\n<p>\r\n想要正確回應控件的事件，須對 asp.net 的生命週期很清楚，尤其需特別注意 需要在 Init or Load 事件中來增加你要處理的事件對應的 <strong>EventHandler</strong>，如此 ASP.NET 才能正確設定相對控件的參數，也就是知道 user 觸發事件時，須去呼叫哪各 EventHandler，\r\n整體 程式碼 如下所示，請參閱\r\n<p>\r\n如對 動態控件 怎麼新增沒概念的讀者，請參閱 上一篇 <a href="http://o4u.tw/?p=14" title="ASP.NET 动态加载控件 基础篇" target="_blank">ASP.NET 动态加载控件 基础篇</a>\r\n<br>\r\n[csharp]\r\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\r\n\r\n   &lt;script language=&quot;C#&quot; runat=server&gt;\r\n       public void Page_Init(object sender, System.EventArgs e)\r\n       {\r\n           Label message = new Label();\r\n           message.ID = &quot;请输入你要说的话&quot;;\r\n           sourceTag.Controls.Add(message);\r\n\r\n           TextBox input = new TextBox();\r\n           input.ID = &quot;input&quot;;\r\n           sourceTag.Controls.Add(input);\r\n\r\n           Button btnSayHello = new Button();\r\n           btnSayHello.ID = &quot;btnSayHello&quot;;\r\n           btnSayHello.Text = &quot;SayHello&quot;;\r\n           btnSayHello.Click += new EventHandler(SubmitBtn_Click);\r\n           sourceTag.Controls.Add(btnSayHello);\r\n       }\r\n       \r\n        void SubmitBtn_Click(Object sender, EventArgs e)\r\n        {\r\n            TextBox input = (TextBox)sourceTag.FindControl(&quot;input&quot;);\r\n            LiteralControl lc;\r\n            lc = new LiteralControl(&quot;&lt;H3&gt;&quot; + input.Text + &quot;&lt;/H3&gt;&quot;);\r\n            sourceTag.Controls.Add(lc);\r\n        }\r\n\r\n   &lt;/script&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n   &lt;form runat=&quot;server&quot;&gt;\r\n\r\n      &lt;h3&gt;动态增加控件 Event 篇&lt;/h3&gt;\r\n       \r\n      &lt;p/&gt;\r\n      &lt;div id=&quot;sourceTag&quot;  runat=&quot;server&quot;&gt;\r\n      &lt;/div&gt;\r\n      &lt;p/&gt;\r\n      一条小龙\r\n   &lt;/form&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n[/csharp]', 1, 'watson', '2012-10-24 15:51:12', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(19, 'ASP.NET', 'ASP.NET 動態加載控件 基礎篇', '關於 是否要使用 動態控件 有很多爭論，這邊先不提，我個人是蠻喜歡使用 這樣的方式 來開發 的。', '關於 是否要使用 動態控件 有很多爭論，這邊先不提，<a href="http://o4u.tw" target="_blank">一條小龍</a> 是蠻喜歡使用 這樣的方式 來開發 的。\r\n\r\n一方面是可以 方便統一 參數設定 在程式中的位置，這個是還蠻重要的，否則 程式碼一長，你要除個錯，就要到一大堆程式碼中去找是在哪邊有設定到。\r\n\r\n另一方面是有利於 後續的 程式 抽象化，<a href="http://o4u.tw" target="_blank">一條小龍</a>的習慣 都是 程式碼 多了以後，就會開始 來想 哪些可以 共用 就再把它 抽象化 來使用。\r\n\r\n抽象化的好處\r\n<ol>\r\n <li>可以將煩瑣、重複的程式碼，隱藏起來，讓我門可以將注意力集中在，目前的主要邏輯運作的思考層面上。</li>\r\n  <li>可以建立共用程式庫，藉此累積平常開發上的知識，後來的人，就不用老是重複相同的過程</li>\r\n</ol>\r\n\r\n\r\n下面示範一個最簡單的 範例，就是大家最常見的 Hello World 來示範\r\n\r\n[csharp]\r\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\r\n\r\n&lt;script language=&quot;C#&quot; runat=server&gt;\r\n\r\nvoid SubmitBtn_Click(Object sender, EventArgs e)\r\n{\r\n  Label message = new Label();\r\n  message.Text=&quot;Hello World!!&quot;;\r\n sourceTag.Controls.Add(message);\r\n}\r\n\r\n&lt;/script&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\r\n &lt;/head&gt;\r\n&lt;body&gt;\r\n &lt;form runat=&quot;server&quot;&gt;\r\n\r\n   &lt;h3&gt;動態加載控件 基礎篇&lt;/h3&gt;\r\n\r\n   &lt;asp:Button id=&quot;Button1&quot; Text=&quot;Say Hello&quot; OnClick=&quot;SubmitBtn_Click&quot; runat=&quot;server&quot;/&gt;\r\n    \r\n    &lt;p&gt;\r\n   &lt;div id=&quot;sourceTag&quot;  runat=&quot;server&quot;&gt;\r\n    &lt;/div&gt;\r\n    &lt;p&gt;\r\n   一條小龍\r\n  &lt;/form&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n[/csharp]\r\n\r\n執行畫面如下:\r\n\r\n<a href="http://o4u.tw/blogImgs/20111123173254251.png"><img src="http://o4u.tw/blogImgs/20111123173254251.png" alt="" title="2011112317325425" width="189" height="129" class="alignnone size-full wp-image-24" /></a>\r\n\r\n<a href="http://o4u.tw/blogImgs/20111123173306181.png"><img src="http://o4u.tw/blogImgs/20111123173306181.png" alt="" title="2011112317330618" width="205" height="169" class="alignnone size-full wp-image-25" /></a>', 2, 'watson', '2012-10-24 12:23:20', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(21, 'JavaScript', 'JS AJAX header 問題', '稍為研究一下 X-Requested-With 這個 Header 是用來防止 CSRF 攻擊，也就是跨網站請求偽造攻擊用的，也就是 AJAX 在呼叫時，只有 下面幾個header 可以跨網站來使用', '最近<a href="http://o4u.tw" target="_blank">一條小龍</a> 的網站的服務商，被駭客入侵，導致一條小龍的網站掛了，資料也都沒了，還好之前有備份可以來重新設計網站，也順便想使用近來了解的 響應式網站的邏輯來重新設計網站。\r\n            \r\n 但在設計過程中，遇到蠻多奇怪的問題，其實最主要的問題，都是因為 <a href="http://o4u.tw" target="_blank">一條小龍</a> 的網站之前都是使用 JQueyr 來打造的，所以這次重新打造網站時，就想要使用純粹的 Javascript 來打造從而導致，一些以前沒想過的問題，這應該算是被 JQuery 寵壞了吧。\r\n\r\n 這也可見 JQuery 之所以會哪麼肥，是有道理的，他裡面經過時間累積，做了很多檢查，來避免很多奇怪的問題。\r\n\r\n 但是也因此從中<a href="http://o4u.tw" target="_blank">一條小龍</a> 也學到蠻多的，這也算使用純粹的 JS 帶來的好處吧。\r\n\r\n 話說回頭，在其中遇到一個比較特別的問題就是，使用 AJAX 的問題，這次重新打造，<a href="http://o4u.tw" target="_blank">一條小龍</a>  打算使用之前研發的一套 <A href=''http://obj.com''>oGrid</A> 來使用，oGrid 當初<a href="http://o4u.tw" target="_blank">一條小龍</a>  為了學習 JS ，趁著一段空檔，研發出來的 JS Grid ，也是使用純粹的 JS 打造的，當初為了 <A href=''http://obj.com''>oGrid</A> 也研發這一套 JS Grid，也有相對應寫了很多配套的 共用程式。\r\n其實共用程式這些都是可以單獨使用的，只是當初還沒空來整理出來使用而已，剛好這次有機會了，就把其中一套 obj4u.Ajax 來出來使用，這個當初是設計用來讀取 JSON data 的，所以沒有很多複雜的程序。\r\n\r\n 囉嗦講了一堆來鋪陳，而會發生這些問題，主要還是因為 <a href="http://o4u.tw" target="_blank">一條小龍</a> 使用一個免費的架站來使用，還算有名叫做 000webhost，但是免費的麻，總免不了要給你硬塞一些廣告，有的沒的，所以在使用上就一直發生問題。\r\n\r\n 而主要就是因為該網站會在回傳的 JSON Data 作後插入一段廣告，如下所示\r\n\r\n    [code lang="js"]\r\n< !-- Hosting24 Analytics Code -->\r\n<script type="text / javascript" src="http://stats.hosting24.com/count.php"></script>\r\n< !--End Of Analytics Code-- >\r\n    [/code]\r\n\r\n 但是<a href="http://o4u.tw" target="_blank">一條小龍</a>  就覺得很奇怪，因為以前使用上沒發生這個問題，去了解一下發現，以前都是用 JQuery AJAX。這就奇怪 obj4u.Ajax 跟 JQuery 的差在哪理，使用 chrome 分析半天，\r\n\r\n 發現差異主要就是在 ajax 傳出去的header不一樣。\r\n\r\n 後來一一測試比較，發現只要在 AJAX 的header 上加上下面這行就可以了。\r\n\r\n[code lang="js"]\r\nvar xmlhttp = new XMLHttpRequest();\r\nxmlhttp.setRequestHeader(''X-Requested-With'', ''XMLHttpRequest'');\r\n[/code]\r\n\r\n 稍為研究一下 X-Requested-With 這個 Header 是用來防止 CSRF 攻擊，也就是跨網站請求偽造攻擊用的，也就是 AJAX 在呼叫時，只有 下面幾個header 可以跨網站來使用，\r\nAccept、Accept-Language、Content-Language、Last-Event-ID、Content-Type ，而 X-Requested-With 這個 header 不行，所以推測網站server 偵測到這個header 就會排除一些動作。\r\n\r\n 具體細節，<a href="http://o4u.tw" target="_blank">一條小龍</a> 還沒啥時間仔細研究，一方面也是因為 server 不是我自己的 也無從得知他做了什麼。所以只好麻煩有興趣的網友可以在去請教古歌大神一下了。', 8, 'watson', '2015-11-30 15:47:21', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(20, 'ASP.NET', 'ASP.NET 改善 ViewState 的效能', '本篇介紹如何藉由改善 ViewState 所造成網路傳輸的負擔，來提高 ASP.NET 的傳輸效率。', '本篇介紹如何藉由改善 ViewState 所造成網路傳輸的負擔，來提高 ASP.NET 的傳輸效率。\r\n\r\nViewState 其實說穿了，就是以前在JSP、ASP、PHP常用的 input tag 而它的型態是 "hidden"， 用來記錄一些網頁狀態之用，如下所示：\r\n\r\n[csharp]\r\n&lt;input type=&quot;hidden&quot; name=&quot;__VIEWSTATE&quot; value=&quot;….&quot; /&gt;\r\n[/csharp]\r\n\r\n而 ASP.NET 更將它發揮至極致，他用 ViewState 來儲存 Page 所有元件中各項屬性的狀態， 例如 TextBox 的字型、大小等等，而這一切接由 ASP.NET 的內部機制自動完成，我們只要 使用就好了，不需去考慮其中複雜的流程。\r\n\r\n當然，要享受它的優點同時也就要接受它的缺點，而我們可以藉由 Control.EnableViewState 這個屬性來做一選擇，這單看你的系統環境而定。\r\n\r\n本篇文章，就是根據這一問題作一探討，看有沒有一兩全其美的方式。\r\n\r\n<strong>目標閱讀者：</strong>\r\n對 ASP.NET 的 ViewState 流程有一定的瞭解。\r\n\r\n簡單來說 ViewState 的原理，就像你要使用一個變數一般，首先就是要先設定變數， 再把變數拿出去使用，ViewState 也是一樣，首先要先 Save ViewState 來設定 ViewState 的值， 再由 Load ViewState 來取得 ViewState 的值。\r\n\r\n在 ASP.NET 中，每個 Control 都會有其相對應這兩個動作的函式，而 Page 就是大總管， 由 Page 來呼叫每一個 Control 相對應的函式，這個並不是本文探討範圍，有興趣的讀者 可去參考「深入剖析 ASP.NET 元件設計」一書，<a href="http://o4u.tw" target="_blank">一條小龍</a> 看了一下裏面寫的還蠻詳細的。\r\n\r\n而在 Page 中相對應做這兩個動作的就是 SavePageStateToPersistenceMedium 和 LoadPageStateFromPersistenceMedium 這兩個函數，所以在這只要覆寫這兩個函數，把 ViewState 的值 save 至另外的儲存體， 在 Load ViewSate 時再從你的儲存體中，還原這個值即可，程式碼如下所示：\r\n\r\n[csharp]\r\nprotected override void SavePageStateToPersistenceMedium(object viewState)\r\n{\r\n   Session[&quot;VS&quot;] = viewState;\r\n}\r\n\r\nprotected override object LoadPageStateFromPersistenceMedium()\r\n{\r\n   return Session[&quot;VS&quot;];\r\n}\r\n[/csharp]\r\n\r\n<a href="http://o4u.tw" target="_blank">一條小龍</a> 建了一千筆的資料，使用 DataGrid 來顯示所有欄位，畫面如下所示，在未使用上述方法時，總原始碼的大小為 471 KB，使用後減為 202 KB，足足 少了一半有餘，由此可知該方法對於傳輸效率的改進，當然，此先決條件是你 元件的資料量很大的時候，才會有顯著的改進，但有上述程式碼可知，本方法 不是很難的作法，如此即可在很低的改進成本下獲得不錯的效果，所以還是很 值得一試的。\r\n\r\n<a href="http://o4u.tw/blogImgs/effFram1.jpg"><img class="size-medium wp-image-11 aligncenter" title="effFram1" src="http://o4u.tw/blogImgs/effFram1-220x300.jpg" alt="" width="220" height="300" /></a>\r\n\r\n該方法對於傳輸效率的改進，當然，此先決條件是你 元件的資料量很大的時候，才會有顯著的改進，但有上述程式碼可知，本方法 不是很難的作法，如此即可在很低的改進成本下獲得不錯的效果，所以還是很 值得一試的。\r\n\r\n以上說明，可知本方法是使用空間換取時間的作法，如果貴單位伺服器記憶體 不足的情況下，亦可將 ViewState 的值存在實體空間中（如硬碟），如何才是 最好的作法，並無一定定論，要視系統環境、使用者使用習慣而定。', 1, 'watson', '2002-08-24 11:49:05', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(22, 'JavaScript', 'oGrid 初探', 'oGrid 是個還蠻有趣的 pure JavaScript grid 控件 code 並不多而且是純 JavaScript 寫成，<a href="http://o4u.tw" target="_blank">一條小龍</a> 覺得還算蠻好理解，不像其他幾乎都是用 Jquery 為 base，所以很適合初學者拿來做研究，或是有需要的人可以後面再根據其架構來自行開發出自己的控件，如此一來因為是自行開發的長期下來，掌控度也會好很多。', 'oGrid 是個還蠻有趣的 pure JavaScript grid 控件 code 並不多而且是純 JavaScript 寫成，<a href="http://o4u.tw" target="_blank">一條小龍</a> 覺得還算蠻好理解，不像其他幾乎都是用 Jquery 為 base，所以很適合初學者拿來做研究，或是有需要的人可以後面再根據其架構來自行開發出自己的控件，如此一來因為是自行開發的長期下來，掌控度也會好很多。\r\n\r\n基本上，<a href="http://o4u.tw" target="_blank">一條小龍</a> 認為，企業想要長期發展，都還是需要自行開發能配合其成長的相關控件，不可能把自己生命交給第三方廠商，然後期待他能配合公司需求來修改控件，當然如果你願意付錢，應該也是可以，但這樣技術都還是掌握在別人手上，這樣企業主能安心嗎? 當然如果該專案，只是這在起步，未來前景還不知道，那倒是可以先找成熟的第三方控件來使用，比較能快速看到成果，但在評選第三方控件時，都還是要能去找到一個掌握度比較大的第三方控件才是，這樣後面專案有任何需求，你也才有辦法去修改調整。\r\n\r\n話不多說，接下來初步看一下，該控件的基本使用方式，下面 code 展示 <a href="http://obj4u.com" target="_blank">oGrid</a> 的一些基本用途，像是可以使用 loadData 來載入 json 資料，然後在後面操作也可以動態再去更新 data，要注意的是這裏的 loadData 只能載入 JS 中的 json 物件資料，如需要動態像後端server 要資料，則要改用 loadFromUrl 這個函式。\r\n\r\n[code lang="js"]\r\n&lt;SCRIPT language="javascript" &gt;\r\n  var obj;\r\n  window.onload = function() {\r\n    obj = new obj4u.oGrid(dataTable);\r\n   obj.loadData(rawData);  // loadData of method can auto generated columns\r\n    obj.addRows(rawData.rows[0]);\r\n   obj.insertRow(1, rawData.rows[0]);\r\n    obj.addRows(rawData.rows);\r\n    obj.renderData();\r\n   obj.event.AddEvent("onSelectedRow", oGrid_SelectedRow);\r\n }\r\n\r\n function oGrid_SelectedRow(rowElement, row)\r\n {\r\n   var selectedRows = obj.getSelectRows();\r\n   alert(rowElement.rowIndex + " - " + selectedRows.length + "," + row["productid"]);\r\n  }\r\n&lt;/SCRIPT>\r\n&lt;TABLE id = "dataTable" &gt;\r\n\r\n&lt;/TABLE&gt;\r\n[/code]\r\n\r\n由上面的 code 可以看出，該控件的使用方式，很接近 C#, Java 等的物件使用方式，很多第三控件使用的方式，是如下面一般，類似函式呼叫，然後傳遞參數的方式來使用，而且其中有個問題是，幾乎大部分設定，都需要第一次初始化時，就要設定完成，不像 oGrid 較為靈活可以在任何時候去設定，只要在重新呼叫 renderData 即可按你的設定，再重新描述資料了。\r\n[code lang="js"]\r\n$(''#dg'').datagrid({  \r\n url:''datagrid_data.json'',  \r\n columns:[[  \r\n    {field:''code'',title:''Code'',width:100},  \r\n    {field:''name'',title:''Name'',width:100},  \r\n    {field:''price'',title:''Price'',width:100,align:''right''}  \r\n ]],\r\n onSelect: function(rowIndex, rowData){\r\n      \r\n    }\r\n});\r\n[/code]\r\n\r\noGrid <a href="http://o4u.tw" target="_blank">一條小龍</a> 就初步介紹到這邊，有興趣的讀者，可以前往官網 <a href="http://obj4u.com" target="_blank">oGrid</a> 進行更深入的了解。', 5, 'watson', '2013-06-21 10:19:00', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(23, 'JavaScript', 'oGrid 介紹如何從 server 取的資料', '接著前次 <a href="http://o4u.tw/WebDoc.php?DocNum=22" target="_blank">oGrid 初探</a>，其中有介紹如何操作local 資料，本次一條小龍將在介紹如何從 server 取的資料。', '接著前次 <a href="http://o4u.tw/WebDoc.php?DocNum=22" target="_blank">oGrid 初探</a>，其中有介紹如何操作local 資料，本次一條小龍將在介紹如何從 server 取的資料。\r\n\r\n如現今流行的 MVC 架構原理及<a href="http://o4u.tw" target="_blank">一條小龍</a> 本身經驗來看，一個好的架構，必須要有著分工明確的設計層次，讓後續接手的人，很清楚知道該處該放哪些資料以及 code。\r\n\r\n由此思路 <a href="http://obj4u.com" target="_blank">oGrid</a> 應該要能讓設計者，可以由後端來處理資料，再傳給元件來做處理，而不要一部分邏輯在前端一部分在後端，雖然要把很多邏輯都放到後端來處理，會加深設計的困難度，但如此一來，就可得到前述的分工明確的要求，盡量讓前端元件，單純只做顯示地處裏或是前端UI與使用者互動的處裏，然後把資料相關的邏輯都給後端來處理。\r\n而且如能維持本精神來設計，到後面前端的架構應該是很幹淨，甚至應該能給不同專案來使用，所以而此可知其實前面設計也許成本變多，但到後面成本反而降低了，這就是一個好的架構，所帶來的優點。\r\n\r\n下面，先來看一下，oGrid 預計要後端來處理的 JSON 資料的格式，然後就可以思考一下，後端該如何設計來呈現這樣的資料格式。\r\n這邊資料格式有幾個重點，total, rows, columns。\r\n\r\ntotal ：是資料總筆數，<a href="http://obj4u.com" target="_blank">oGrid</a> 會根據此來進行分頁的呈現，第一次 init 時，只需要傳回第一分頁的資料，等到下一分頁時 oGrid 會再發送要求來抓取下一分頁的資料。\r\nrows：是資料主體，除了描述資料，還可以再每列上或是在特定的 cell 加注 style，如下面第一列的方式，這個模式可以方便開發人員在特定資料來標注顏色，例如:單價過低 等等。\r\ncolumns：告訴 oGrid 欄位的定義，以及呈現方式，column 裏面屬性分別的意義，可以參考官網上的說明。\r\n\r\n[code lang="js"]\r\n{"total":30,\r\n "rows":[\r\n {"Id":1,"name":"test1","addr":"address - 1","phone":"P1", "cellStyle":[\r\n   {"field":"phone","className":"error","style":null},\r\n   {"field":"name","className":"error","style":null}\r\n   ]},\r\n {"Id":2,"name":"test2","addr":"address - 2","phone":"P2"},{"Id":3,"name":"test3","addr":"address - 3","phone":"P3"},\r\n  {"Id":4,"name":"test4","addr":"address - 4","phone":"P4"},{"Id":5,"name":"test5","addr":"address - 5","phone":"P5"},\r\n  {"Id":6,"name":"test6","addr":"address - 6","phone":"P6"},{"Id":7,"name":"test7","addr":"address - 7","phone":"P7"},\r\n  {"Id":8,"name":"test8","addr":"address - 8","phone":"P8"},{"Id":9,"name":"test9","addr":"address - 9","phone":"P9"},\r\n  {"Id":10,"name":"test10","addr":"address - 10","phone":"P10"}],"columns":[\r\n    {"field":"Id","title":"code","width":"100px","hidden":false},\r\n   {"field":"name","title":"name","width":"100px","hidden":false},\r\n   {"field":"addr","title":"address","width":"100px","hidden":false},\r\n    {"field":"phone","title":"phone","width":"100px","hidden":false}\r\n  ]}\r\n  ]\r\n}\r\n[/code]\r\n\r\n下面是 後端的程式碼，用 PHP 寫成，老實說 .Net 跟 PHP 比起來，PHP 在做 JSON 資料的處理真的是比較簡單且直覺。\r\n首先讀者要先建立 幾個 class 來處理上述資料，使用對應 class 處理好資料後，丟給 PHP 就會自動幫你生成上述資料的格式了。\r\n一是 rows 資料主體，這裏用 cutomer 這個 class 來處理客戶資料，下面的 sample code 只是簡單示範如何處理資料，實務上需要再加上資料庫的讀取處理。如上述，下面 Sample 也有示範如何在 rows 中包含 rowStyle 以及 cellStyle 這兩個 class 的使用，在有需要的時候可以用來描述資料顯示的樣式，但非必要選項。\r\n二是 columns 這個部分的 code 其實算是一個通用的 server code，實務上可以把這部分包成一個共用類別來處理。\r\n\r\noGrid 在跟 server 要資料，會傳三個參數來告訴 server side 要給 <a href="http://obj4u.com" target="_blank">oGrid</a> 怎樣的資料，參數分別說明如下：\r\ntype：有 init, data 兩種，一開始 oGrid init 時 type 為 init，後面 user 切換分頁時，type=data。\r\npage：代表目前 oGrid 所在分頁。\r\nrows：代表每個分頁要顯示的資料筆數。\r\n\r\n[php]\r\n\r\n&lt;?php\r\nclass column\r\n{\r\n  public $field;\r\n  public $title;\r\n  public $width;\r\n  public $hidden;\r\n \r\n  function column($id, $caption)\r\n  {\r\n   $this->field = $id;\r\n   $this->title = $caption;\r\n    $this->width = "100px";\r\n   $this->hidden = false;\r\n  }\r\n}\r\nclass customer\r\n{\r\n public $Id;\r\n public $name;\r\n public $addr;\r\n public $phone;\r\n}\r\nclass rowStyle\r\n{\r\n  public $className;\r\n  public $style;\r\n}\r\nclass cellStyle\r\n{\r\n public $field;\r\n  public $className;\r\n  public $style;\r\n}\r\n$type = $_GET["type"];\r\n$page = isset($_POST[''page'']) ? intval($_POST[''page'']) : 0; \r\n$rows = isset($_POST[''rows'']) ? intval($_POST[''rows'']) : 10; \r\n\r\n$start = $page * $rows + 1;\r\n$last = $start + $rows;\r\n$items = array();  \r\nfor($i=$start;$i< $last;$i++){  // deal rows data\r\n  $obj = new customer();\r\n  $obj->Id = $i;\r\n  $obj->name = "test".$i;\r\n $obj->addr = "address - ".$i;\r\n $obj->phone = "P".$i;\r\n if($i == 1)\r\n {\r\n   //$obj->rowStyle = new rowStyle();\r\n    ////$obj->rowStyle->style = "background-color:#ffee00;";\r\n    //$obj->rowStyle->className = "error";\r\n    \r\n    // for cell\r\n   //$obj->cellStyle = new cellStyle();\r\n    //$obj->cellStyle->field = "phone";\r\n   //$obj->cellStyle->className = "error";\r\n   \r\n    $obj->cellStyle = array();\r\n    $cs = new cellStyle();\r\n    $cs->field = "phone";\r\n   $cs->className = "error";\r\n   array_push($obj->cellStyle, $cs);\r\n   \r\n    $cs = new cellStyle();\r\n    $cs->field = "name";\r\n    $cs->className = "error";\r\n   array_push($obj->cellStyle, $cs); \r\n  }\r\n array_push($items, $obj); \r\n}\r\n$result["total"] = 30;\r\n$result["rows"] = $items;\r\n\r\n\r\nif($type == "init") // deal columns when type is init\r\n{\r\n  $columns = array();\r\n $col = new column("Id", "code");\r\n  array_push($columns, $col);\r\n $col = new column("name", "name");\r\n  array_push($columns, $col);\r\n $col = new column("addr", "address");\r\n array_push($columns, $col);\r\n $col = new column("phone", "phone");\r\n  array_push($columns, $col);\r\n $result["columns"] = $columns;\r\n}\r\n\r\necho json_encode($result); \r\n\r\n?&gt;\r\n[/php]\r\n\r\n上面 code 要注意的是只有 type=init 時才需要處理 columns，如果是切換分頁時，type = data。\r\n\r\n最後，介紹的是 前端的 <a href="http://obj4u.com" target="_blank">oGrid</a> 對應的操作，這部分相對於 server code 簡單很多，只要如下面 sample 設定好 loadURL 來告訴 oGrid 到 server 哪抓取JSON 資料，再呼叫 load (同步)，oGrid 就會到 server 端抓回資料，有必要讀者 來可以在 load 後針對抓取後的資料在來做處理，如不需要，則可直接呼叫 renderData 來描繪UI。\r\n\r\n下面 sample 有一個特別的地方，就是 obj.reloadPage = false;， oGrid 預設 reloadPage=true，代表每次有更換分頁的動作都會到 server 端來要求傳回對應的分頁資料，如果設定為 false 則 oGrid 會檢查該分頁資料是否有抓取過，沒有抓取過才會去server 端抓取，如此因為不用每次都到 server 端來要資料，所以效率提高很多。但相對也會有點風險，因為 server 端資料 如果被更改過，oGrid 卻沒有重新 reload 資料，則會造成前端資料跟server 不一致的錯誤，所以讀者要看需求來決定是否要設 false。\r\n\r\n[code lang="js"]\r\n\r\n  &lt;SCRIPT language="javascript"&gt;\r\n    var obj;\r\n    window.onload = function () {\r\n     obj = new obj4u.oGrid(dataTable);\r\n     obj.event.AddEvent("onLog", showLog);\r\n     obj.event.AddEvent("onSelectedRow", oGrid_SelectedRow);\r\n\r\n     obj.loadUrl = ''http://obj4u.com/samples/getJSON3.php'';\r\n      //obj.reloadPage = false; // when this page only view data can use this function.\r\n     obj.load("init");\r\n     obj.renderData();\r\n   }\r\n\r\n   function oGrid_SelectedRow(rowElement, row) {\r\n     var selectedRows = obj.getSelectRows();\r\n     alert(rowElement.rowIndex + "," + row.index + " , " + selectedRows.length + "," + row["Id"]);\r\n   }\r\n\r\n   function showLog(msg) {\r\n     alert(msg);\r\n   }\r\n\r\n\r\n &lt;/SCRIPT&gt;\r\n\r\n\r\n &lt;TABLE id="dataTable"&gt;\r\n  &lt;/TABLE&gt;\r\n[/code]\r\n\r\n有興趣的讀者可以再到官網 <a href="http://obj4u.com" target="_blank">oGrid</a> 來詳閱。', 3, 'watson', '2013-07-26 09:49:00', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(24, 'JavaScript', '使用 Jquery 來實現可以輸入值的下拉選單 雛型', '最近案子中，需要使用下拉選單，但問題是，裏面選項都會有各 [其他]，然後 可以 讓 user 在輸入值', '\r\n最近案子中，需要使用下拉選單，但問題是，裏面選項都會有各 其他：，然後 可以 讓 user 在輸入值\r\n\r\n上網 找了一下，有一堆現成的控件，可是 現成的 我要去了解，來結合我現在 系統來應用，要花不少時間，這個時間 跟我自己 搞一個成本 應該差不多\r\n\r\n那我還不如 自己 搞一個，比較能了解 怎麽運作，後面就更容易加以運用了。\r\n\r\n \r\n\r\n我的目標是，要把 這個 作成一個控件來使用，並要降低外部程式使用的耦合性，也就是 外部程式 使用上所需的必要條件要盡量減少，免得一忘記加什麽設定，程式 就掛了。\r\n\r\n如有可能 甚至希望，只會需要引用一個 Jquery 其他 JavaSciprt 都由程式 來產生。\r\n\r\n最後是希望能結合 之前講得動態控件 來使用，今天 我就先研究一下，用出了下面這個 html 做的雛型，來先行測試一下可行性，確認無誤在開始動工改成 ASP.NET 的控件 。\r\n\r\n \r\n\r\n這程式 有幾個 重要問題，需要注意的：\r\n\r\n下拉選單的觸發方式、下拉選單的內容如何繪出，選單事件觸發的抓取、抓取到選擇事件後值要存在哪裏\r\n\r\n上述問題解決後，後面 都要用 ASP.NET 的方式來重新撰寫，所以在設計雛型時，需注意其能否應用在 ASP.NET 上\r\n\r\n \r\n\r\n構思如下：\r\n\r\n這我的打算就是設計一個 button 藉由其 OnClick 事件來觸發，到時會由 JQuery 抓取 ASP.NET 動態產生的選單陣列，來動態產生選單，\r\n\r\n產生的選單，要能設定三各事件 mouseover mouseout click，前兩各 是為了美觀，這樣 user 才知道 有在動作，click 事件觸發後，\r\n\r\n將選取到的值儲存到 asp.net 的 server 控件 TextBox 中，如此 在 PostBack 就能把值 傳回 server 端 來處理。\r\n\r\n[code lang="js"]\r\n<head>  \r\n        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />\r\n        <script type="text/javascript" src="http://code.jquery.com/jquery-1.7.1.min.js" ></script>  \r\n        <title>使用 Jquery 來實現可以輸入值的下拉選單（一）</title>  \r\n     \r\n     \r\n        <script type="text/javascript">\r\n            $(document).ready(function () {\r\n                //動畫速度  \r\n                var speed = 500;\r\n\r\n                //選單的相關處理事件\r\n                $("#divPop div").live("mouseover mouseout click", function (event) {\r\n                    if (event.type == "mouseover") {\r\n                        //$(this).addClass(『highlight』);\r\n                        $(this)[0].style.backgroundColor = ''#E6F5FA'';\r\n                    }\r\n                    if (event.type == "mouseout") {\r\n                        //$(this).removeClass("highlight");\r\n                        $(this)[0].style.backgroundColor = ''#DDFFDD'';\r\n                    }\r\n                    if (event.type == "click") {\r\n                        var inID = $("#btnDDL").get(0).getAttribute("inputid");\r\n                        //alert($(this).html());\r\n                        $("#" + inID).val($(this).html());\r\n                    }\r\n                });\r\n                //動態產生下拉選單的選項，後面 要從 array 中讀取產生選單\r\n                $("#divPop").append("<div>test1</div>");\r\n                $("#divPop").append("<div>test2</div>");\r\n\r\n                //綁定事件處理  \r\n                $("#btnDDL").click(function (event) {\r\n                    //取消事件冒泡  \r\n                    event.stopPropagation();\r\n                    //設置彈出層位置  \r\n                    var offset = $(event.target).offset();\r\n                    //alert($(event.target).width());\r\n                    var inID = $(this).get(0).getAttribute("inputid");\r\n                    //依據 input 跟 button 寬度來設定 下拉選單的寬度\r\n                    $("#divPop")[0].style.width = ($("#" + inID).width() + $(this).width() + 10) + "px";\r\n                    //單擊空白區域隱藏彈出層  \r\n                    $(document).click(function (event) { $("#divPop").hide(speed) });\r\n                    //設定下拉選單顯示的位置\r\n                    $("#divPop").css({ top: offset.top + $(event.target).height() + 10 + "px", left: offset.right });\r\n                    //切換彈出層的顯示狀態  \r\n                    $("#divPop").toggle(speed);\r\n                });\r\n            });\r\n\r\n        </script>  \r\n     \r\n    </head>  \r\n    <body>  \r\n        <div>  \r\n            <br /><br /><br />  \r\n            <input name="txtKey" type="text" maxlength="30" size="30" id="txtKey" style="Padding:2px;" /><button id="btnDDL" inputid="txtKey" >▼</button>  \r\n        </div>  \r\n              \r\n        <!-- 彈出層 -->  \r\n        <div id="divPop" style="background-color: #DDFFDD; border: solid 1px #000000; position: absolute; display:none;  \r\n            width: 300px; height: 100px;">  \r\n            \r\n        </div>  \r\n    </body>  \r\n    </html>\r\n[/code]\r\n\r\n這裏面 還有各 想解決的問題，就是要讓 divPop 也能動態產生...', 1, 'watson', '2012-10-25 18:06:00', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(25, 'MVC', 'MVC & JQuery  CheckBox 使用重點', '這陣子，一條小龍老在用 checkbox，MVC 中要建立一個 CheckBox，也是有一些小技巧的，所以特地寫個一篇來介紹一下。', '這陣子，<a href="http://o4u.tw" target="_blank">一條小龍</a>老在用 checkbox，MVC 中要建立一個 CheckBox，也是有一些小技巧的，所以特地寫個一篇來介紹一下。\r\n\r\n基本的 MVC 使用的方法 如下:\r\n\r\n[csharp]\r\n  @Html.CheckBoxFor(x => x.o4u.IsNeedSupport) 需要支援嗎？\r\n[/csharp]\r\n\r\n執行後，會產生下面的 HTML 碼\r\n\r\n[html]\r\n  <input checked="checked" data-val="true"  id="o4u_IsNeedSupport" name="o4u.IsNeedSupport" type="checkbox" value="true">\r\n[/html]\r\n\r\n基本的操作是很簡單。但重點是 CheckBox 常會連帶很多 操作，就需要使用到 JQuery 來輔助了，這時，你就會需要知道 Html ID 的產生規則，將上述產生出的 Html 碼，跟原始 C# 比較，可以發現規則如下：\r\n\r\nx.o4u.IsNeedSupport => ID=’o4u_IsNeedSupport’\r\nx.isO4u => ID = ‘isO4u’\r\n\r\n下邊這介紹 JQuery 常用的使用 CheckBox 的方法\r\n\r\n* 如何偵測 CheckBox value 有變更\r\n[code lang="js"]\r\n  $("#o4u_IsNeedSupport").change(function () {\r\n    alert(''o4u had change'');\r\n  });\r\n[/code]\r\n\r\n* 如何偵測 CheckBox 有無被勾選\r\n[code lang="js"]\r\n if ($("#o4u_IsNeedSupport").is(":checked")) {\r\n   alert(''o4u had checked'');\r\n } else {\r\n    alert(''o4u must check'');\r\n  }\r\n[/code]\r\n\r\n* 如何設定 CheckBox 被勾選\r\n[code lang="js"]\r\n $(''#o4u_IsNeedSupport'').attr(''checked'', true);\r\n[/code]\r\n\r\n* 如何設定 CheckBox Readonly\r\n[code lang="js"]\r\n $(''#o4u_IsNeedSupport'').attr("disabled", true);\r\n[/code]', 9, 'watson', '2014-12-17 12:00:00', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(26, 'MVC', 'MVVM 的利器 knockout', 'MVVM 真的是越來越流行，甚至已經變成一個設計的趨勢。基本上 ASP.NET 的 MVC 跟 JS 的 MVVM 都是一種分層設計的概念。主要精神，都是使用 物件來驅動畫面生成。', 'MVVM 真的是越來越流行，甚至已經變成一個設計的趨勢。基本上 ASP.NET 的 MVC 跟 JS 的 MVVM 都是一種分層設計的概念。主要精神，都是使用 物件來驅動畫面生成。\r\n\r\n而 knockout.js是一套JavaScript UI程式庫，主要用來在網頁實現MVVM設計模式。就一條小龍使用的感覺來說，knockout 算是很直覺好用了，唯一的麻煩就是，要想使用，一定要將變數都轉成 knockout 的物件來操作。不過，瑕不掩瑜，這些小問題讀者只要上手一陣子，相信都很容易克服。\r\n\r\nMVVM 的架構，一般來說都會有幾個特性，讀者了解後，就很容易去理解他的設計概念以及使用的方法。\r\n\r\n其中一個特性，就是在 html 的部份，會有 MVVM 自己的 attribute 來標記如何處理它 html content，最常見的就是 data-bind 這個 tag，這個就是告訴 MVVM 如何去 bind 資料，除了少數幾個特殊的 html tag，通常這些 MVVM 自己的 attribute 都是通用所有 html tag 。\r\n\r\n例如：\r\n[html]\r\n<input data-bind="value: lastName" />\r\n[/html]\r\n\r\n就是在告訴 MVVM 要把 lastName 的值，設定到 html value 這個屬性中，如果 lastName = ‘test’，上述 html tag 就會生成為\r\n\r\n[html]\r\n<input value=''test'' data-bind="value: lastName" />\r\n[/html]\r\n\r\n另外一個，特性就是，為了雙向 bind ，也就是 html input value 改變的值要設定回 lastName，或是 lastName 的值改變時，觸發event 藉由如此來將值要反應到 html input value 上，所以為達成上述木的 MVVM 一定會需要兩邊都要 bind event。\r\n\r\nhtml 要 parse 出那些 html tag 有設定 data-bind 這個 attribute，然後在 bind event ，這時就會需要有一個 觸發點，在 knockout 中就是使用 ko.applyBindings 這個方法。\r\n\r\n而 lastName 的值改變，要 bind event，在 knockout 中就是利用他自己的 object，並且要求你要雙向反應的 data 都要使用 knockout object 來處理，這樣 knockout 就能順利來 bind value 改變時的 event。\r\n\r\n了解上述的 MVVM 基本原理，在來看下面範例，就會比較容易理解，為何要這樣設計。\r\n下面，一條小龍簡單做了一個範例，主要示範幾個常會用到的技巧\r\n\r\n範例如下：\r\n[code lang="js"]\r\n<script src="knockout-3.1.0.js"></script>\r\n\r\nfirstName:<input data-bind="value: firstName" /><br />\r\nlastName:<input data-bind="value: lastName" /><br />\r\n<button data-bind=''click: addPerson''>Reset clicks</button>\r\n\r\ncount:<span data-bind="text: count"></span>\r\n<table>\r\n    <thead>\r\n        <tr><th>First name</th><th>Last name</th></tr>\r\n    </thead>\r\n    <tbody data-bind="foreach: peoples">\r\n        <tr>\r\n            <td data-bind="text: firstName"></td>\r\n            <td data-bind="text: lastName"></td>\r\n            <td ><button data-bind="click: $parent.removePerson">remove</button></td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n \r\n<script type="text/javascript">\r\n\r\n    function Country() {\r\n        var self = this;\r\n\r\n\r\n        self.peoples = ko.observableArray([\r\n                        { firstName: ''Bert'', lastName: ''Bertington'' },\r\n                        { firstName: ''Charles'', lastName: ''Charlesforth'' },\r\n                        { firstName: ''Denise'', lastName: ''Dentiste'' }\r\n            ]);\r\n        self.firstName = ko.observable();\r\n        self.lastName = ko.observable();\r\n\r\n        self.count = ko.computed(function () {\r\n            return self.peoples().length;\r\n        });\r\n\r\n        self.addPerson = function () {\r\n            var obj = { firstName: self.firstName(), lastName: self.lastName() };\r\n            self.peoples.push(obj);\r\n            self.firstName("");\r\n            self.lastName("");\r\n        };\r\n\r\n        self.removePerson = function () {\r\n            self.peoples.remove(this);\r\n        }\r\n    }\r\n    var viewM = new Country();\r\n    ko.applyBindings(viewM);\r\n</script>\r\n[/code]\r\n\r\n上面這個範例中，有幾點要特別注意，\r\n其中一個就是 self 的使用，其實 不使用 self 技巧也是能運作，但是會造成很多困擾，尤其是 click 事件的時候，像 removePerson 觸發時，this 代表的是該 peoples 其中的一個 object 而不是country 這個 object，\r\n\r\n另外就是 knockout 的操作方式，也就是 他的 object 都是 function，讀者 不用knockout object 來操作，改變的值就不會即時反應到畫面上，尤其在實際應用上，從後端接收 json 資料，有時不一定會全部都轉換成 knockout object，例如上述例子中的 peoples 陣列中的值，就全是一般的 json data，所以操作上就要很小心，否則會常發現怎麼 值沒有即時反應。\r\n\r\n最後，上面這個範例<a href="http://o4u.tw" target="_blank">一條小龍</a>示範了，如何用 knockout 來對資料做 新增 以及 刪除，但讀者應該發現了其中，還缺少修改功能，這是<a href="http://o4u.tw" target="_blank">一條小龍</a> 想留給，讀者來自己試著用上述的範例來試試看，怎麼實現修改功能。', 2, 'watson', '2014-06-04 12:00:00', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(27, 'ASP.NET', '使用 PropertyInfo 來動態設定參數的值', '實務上，尤其是 C#.NET 在做通用型的物件時，<a href="http://o4u.tw" target="_blank">一條小龍</a>都會常需要能自己組合字串，來設定或取得物件的參數值。', '實務上，尤其是 C#.NET 在做通用型的物件時，<a href="http://o4u.tw" target="_blank">一條小龍</a>都會常需要能自己組合字串，來設定或取得物件的參數值。\r\n\r\n每次要使用這個方式來取得參數值時，<a href="http://o4u.tw" target="_blank">一條小龍</a>就會覺的 JavaScript 超好用，.NET 這邊有幾種方式 可以來使用，下面用 C# 來示範，VB.NET 也是差不多的方法，讀者可以參考本文來改寫。\r\n\r\n一般有序列的參數，來取得或設定值，這種通常發生再與 時間相關的資料上，例如 12 個月份，可是 在資料庫是存直的，也就是一個月份是一筆資料，這時使用 property 相關屬性就很方便來操作。\r\n[csharp]\r\n\r\nprotected void SetMonthData(object tarobj, MonthData srcObj)\r\n{\r\n tarobj.GetProps()[&amp;quot;M&amp;quot;+srcObj.Month].SetValue(tarobj, srcObj.Amount);\r\n}\r\n\r\nprotected void GetMonthData(object tarobj, MonthData srcObj)\r\n{\r\n  return tarobj.GetProps()[&amp;quot;M&amp;quot;+srcObj.Month].GetValue(tarobj);\r\n}\r\n[/csharp]\r\n\r\n另一種，一條小龍以前常用到的，就是設計一個 通用型的預設值 Method，這樣一來，其他有特殊的就可在繼承來改寫。\r\n\r\n[csharp]\r\npublic static void SetModelInfoDefaultValue(object obj)\r\n{\r\n var props = obj.GetType().GetProperties();\r\n  foreach (System.Reflection.PropertyInfo prop in props)\r\n  {\r\n   if (prop.PropertyType == typeof(bool))\r\n    {\r\n     prop.SetValue(obj, true);\r\n   }\r\n   if (prop.PropertyType == typeof(string))\r\n    {\r\n     prop.SetValue(obj, &amp;quot;&amp;quot;);\r\n   }\r\n   if (prop.PropertyType == typeof(int))\r\n   {\r\n     prop.SetValue(obj, 1);\r\n    }\r\n }\r\n}\r\n[/csharp]\r\n\r\n其實這種動態設定參數，在現在 MVC 時代，應用超多，例如 web 接收資料時，將web request data 自動轉換成 object，也是應用類似的觀念來操作的。', 1, 'watson', '2014-12-18 12:00:00', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(28, 'HTML', '增加跟文字不同顏色的刪除線', '最近在做專案，再套HIE 給的 HTML 版面時，突然發現一般想在 html 上增加刪除線，一般都是利用CSS 來設定，如下所示', '最近在做專案，再套HIE 給的 HTML 版面時，突然發現一般想在 html 上增加刪除線，一般都是利用CSS 來設定，如下所示\r\n\r\n[html]\r\n  <span style="text-decoration:line-through;">test</span>\r\n[/html]\r\n\r\n這是最基本的刪除線作法，想要更進一步讓刪除線的顏色 跟 文字 顯示 不一樣就需要像下面使用兩個 span tag 的作法才行了\r\n\r\n[html]\r\n <span style="Color:red; text-decoration:line-through;"><span style="Color:black;">test</span></span>\r\n[/html]\r\n\r\n如上所示，這樣一來就可以讓 刪除線顯示紅色，而文字用紅色來顯示\r\n\r\n但是，上述 都還是會有一個問題，就是 刪除線的樣式，都還只能調顏色，想變粗或變變長一點都不行 …\r\n<a href="http://o4u.tw" target="_blank">一條小龍</a>查半天，好像也沒更好作法，所以就自己想出一個方法，就是用 DIV ，以模擬的方式來做，具體作法如下所示：\r\n\r\n[html]\r\n  <span style="Color:black;padding-left:10px;">test</span>\r\n  <div style="Color:red;width:50px;border-top:2px solid;position: relative; top: -10px;"></div>\r\n[/html]\r\n\r\n如果讀者有更好的做好，也歡迎通知 <a href="http://o4u.tw" target="_blank">一條小龍</a> 喔', 2, 'watson', '2015-01-29 12:00:00', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(29, 'MVC', 'Javascript 的數字傳遞問題', '一條小龍，最近在突然發現一個有趣的現象，就是 javascript 在傳遞值的時候，要特別注意一下型別，沒特別原因，就還是 盡量使用文字來傳遞。', '一條小龍，最近在突然發現一個有趣的現象，就是 javascript 在傳遞值的時候，要特別注意一下型別，沒特別原因，就還是 盡量使用文字來傳遞。\r\n\r\n這是為啥勒，因為 JS 可以允許，你數字傳遞時，超過它定義的範圍(雙精確度 64 位元)，一旦 超過勒，它就自動 捨去尾巴，也不會報錯，所以事後發生問題後，再來追就會很麻煩了。\r\n\r\n這個案例，也是 <a href="http://o4u.tw" target="_blank">一條小龍</a>，在幫忙修改前人程式時，突然發現的，一般人，可能 也沒特別注意，尤其是 net MVC 的程式，太方便了，就開始直接 寫，如下\r\n\r\n[html]\r\n<img src="@Url.Content(&quot;~/Content/images/Edit.png&quot;)" onclick="showEdit(@item.EvtID)">\r\n[/html]\r\n\r\n上述 例子中，該 item.EvtID 在後端，其實是 文字型態，但用上述方式設定值給 javascript 的 showEdit function 時，因為沒加上單引號，會變成數字型態了，而且該ID 格式是 yyyyMMddhhmmssFFF，換轉成數字足足 有 17位數，已經超過 javascript 的數字最大值了，所以數字 就會開始 亂跳了，因此造成程式錯誤，運氣好，然後測的不夠仔細，你可能 還不會發現這個問題。\r\n\r\n所以這告訴<a href="http://o4u.tw" target="_blank">一條小龍</a> 一個經驗就是，後端在直接，描述 javascript 語法時，參數最好都應該加上單引號 或雙引號，讓其變成字串格式來傳遞比較保險，除非是有要進行數字運算的\r\n\r\n所以正確做法應該如下\r\n[html]\r\n<img src="@Url.Content(&quot;~/Content/images/Edit.png&quot;)" onclick="showEdit(''@item.EvtID'')">\r\n[/html]\r\n\r\n有時前後端，混雜一起寫，就很容易發生把後端語法，撰寫習慣，拿來寫 前端程式中應用，就造成上面的例子了。', 3, 'watson', '2015-03-11 12:00:00', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(30, 'HTML', '用CSS 將過長溢出的文字自動省略的作法', '<a href="http://o4u.tw" target="_blank">一條小龍</a> 一般在撰寫 web 程式時，針對文字太長，需要來截斷顯示時，習慣是用後端程式來計算後，在輸出到前端的 HTML 來顯示。', '<a href="http://o4u.tw" target="_blank">一條小龍</a> 一般在撰寫 web 程式時，針對文字太長，需要來截斷顯示時，習慣是用後端程式來計算後，在輸出到前端的 HTML 來顯示。\r\n\r\n但是在近來 MVC 時代的崛起，在此種架構下，就比較不適合如此作法，在 MVC 時代，<a href="http://o4u.tw" target="_blank">一條小龍</a> 架構的思考邏輯是，後端程式 要盡量單純，最好只處理 商業邏輯與抓資料的工作，所以會單純指拋 JSON Data 給前端，在這狀況下，針對文字太長，就需要用 前端作法來處理了，而既然 資料都到前端了，那如果能用 CSS 來處理，那這樣不是單純很多嗎?\r\n\r\n在 HTML 5 的時代，CSS 真的很強，原本很多都需要 Javascript 來預先處理，在顯示的資料，很多現在也都能交給 CSS 來處理了，讀者有空也可以多去了解。\r\n\r\n下面 就介紹 CSS 處理截斷文字的幾種方式\r\n\r\n[html]\r\n\r\n<style type="text/css">\r\ndiv {\r\n  overflow : hidden;\r\n  text-overflow : ellipsis;\r\n white-space : nowrap;\r\n width : 240px;\r\n}\r\n</style>\r\n\r\n<div>Hello world! this is a test XXXX！</div>\r\n\r\n[/html]\r\n\r\n輸出結果如下：\r\n\r\nHello world! this is a test ...\r\n\r\n上述的CSS 中的重點就是 text-overflow 要設成 ellipsis 那就會在文字超出 240px 的寬度時，自動截掉超出文字，再加上 ...\r\n\r\n如果是 text-overflow 設成 clip ，會自動截掉超出文字，但是不會再加上 ...\r\n\r\n如果用在 span 上，記得多加一行 display : inline-block，如下所示\r\n\r\n[html]\r\n<style type="text/css">\r\n.ell {\r\n  overflow : hidden;\r\n  text-overflow : ellipsis;\r\n white-space : nowrap;\r\n width : 240px;\r\n  display : inline-block;\r\n}\r\n</style>\r\n\r\n<span class="ell">Hello world! this is a test XXXXXXX</span>\r\n[/html]\r\n\r\n如上述，使用 CSS 是不是省很多程式計算的工夫，但是有個小問題，要注意的是，CSS 不是計算字數，來自動截掉超出文字，而是計算寬度。\r\n\r\n所以這造成一個問題，就是 IE, Chrome, Firefox 等，在你設成 240px 的寬度時，所能顯示的字數是不太一樣的，讀者可在自行嘗試看看。', 11, 'watson', '2015-12-01 14:00:00', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(31, 'JavaScript', 'JavaScript get child element', '單純使用 javascript 來 select html element 有很多方法，也可以像 Jquery 一樣取得 parent 底下的 element。雖然使用JQuery 就沒這問題，但是一些簡單的網頁，也要載入一個很重的 JQuery 就感覺不是很良好。  而且單純使用 JavaScript 學會以後，也能增加 select element 的效率。', '單純使用 javascript 來 select html element 有很多方法，也可以像 Jquery 一樣取得 parent 底下的 element。雖然使用JQuery 就沒這問題，但是一些簡單的網頁，也要載入一個很重的 JQuery 就感覺不是很良好。\r\n\r\n而且單純使用 JavaScript 學會以後，也能增加 select element 的效率。不要懷疑 Jquery 其實也是使用原生的 JavaScript 在 select element 的。\r\n\r\nselect element 的方法常常會用到，為了不常常請教 古歌大神 <a href="http://o4u.tw" target="_blank">一條小龍</a> 在這紀錄一下找到的一些解法，以供後面參考。\r\n\r\n首先第一步，你當然要先取得 parent element，可以先用下面最常見的做法\r\n\r\nvar parent= document.getElementById(“yourParent");\r\n\r\n再來要取得 child element 有底下幾種作法，這邊 只列出 常見幾種：\r\n\r\n1.最原始的方式就是使用 每個 element 都會有的 childNotes 屬性來一個個掃下去，但是<a href="http://o4u.tw" target="_blank">一條小龍</a>建議，除非你想去 parse 不是你設計的頁面，還是想從底層設計framework 等等之類用途，還是不要使用此方法，因為太麻煩了…@@，而且要掃這麼多 element ，相信<a href="http://o4u.tw" target="_blank">一條小龍</a> JQuery 作的其實還不錯，也有一定效率。在不濟，也可以使用 querySelector 等原生JavaScript 提供的函數。\r\n\r\n範例如下:\r\n[code lang="js"]\r\n\r\n<script>\r\nfunction getElements()\r\n{\r\n  var divIn=document.getElementById("inputs");\r\n  var ins=divIn.children;\r\n var z = 0, k = 0;\r\n for (var i = 0; i < ins.length; i++) { \r\n   var size = ins[i].getAttribute("size");\r\n   if ( ins[i].tagName == "INPUT" ) { \r\n     k += 1;\r\n   }\r\n   if ( size == "20" ) { \r\n      z += 1;\r\n   }\r\n }\r\n alert(k+","+z);\r\n}\r\n</script>\r\n\r\n<div id="inputs">\r\n  <input type="text" size="20"><br>\r\n <input type="text" size="20"><br>\r\n <input type="text" size="30"><br>\r\n</div>\r\n<input type="button" onclick="getElements()" value="How many input elements?">\r\n\r\n[/code]\r\n\r\n2.使用 element 提供的幾個函數，有 getElementsByTagName, getElementsByClassName, getElementsByTagNameNS 這三個是比較早期的瀏覽器都會有支援的函數，比較沒有相容性問題。\r\n但要使用順利，就必須一開始 html 的設計上，就必須要有相對性的規劃。\r\n\r\n範例如下:\r\n[code lang="js"]\r\n\r\n<script>\r\nfunction getElements()\r\n{\r\n var divIn=document.getElementById("inputs");\r\n  var ins=divIn.getElementsByTagName("input");\r\n  alert(ins.length);\r\n  var z = 0;\r\n  for (var i = 0; i < ins.length; i++) { \r\n   var size = ins[i].getAttribute("size"); \r\n    if ( size == "20" ) { \r\n      z += 1;\r\n   }\r\n }\r\n alert(z);\r\n}\r\n</script>\r\n\r\n<div id="inputs">\r\n  <input type="text" size="20"><br>\r\n <input type="text" size="20"><br>\r\n <input type="text" size="30"><br>\r\n</div>\r\n<input type="button" onclick="getElements()" value="How many input elements?">\r\n\r\n[/code]\r\n\r\n3.最後是目前新一代的瀏覽器都會有支援的函數 querySelector, querySelectorAll，這兩個函數據說效能比 JQuery 的還要好，但要注意的是 IE8+ 才有支援，所以在現在 還有一大堆人在使用 IE6, IE7 的狀況，會有些問題。\r\n\r\n範例如下:\r\n[code lang="js"]\r\nvar x = document.getElementById("myDIV");\r\nx.querySelector(".example").innerHTML = "Hello World!";\r\n[/code]\r\n\r\n雖然現在很多 JS framework 都有支援更多好用的方法，但<a href="http://o4u.tw" target="_blank">一條小龍</a>個人覺得基礎還是很重要的，簡單的頁面就用單純的來 JS 來解決，尤其在各式 framework 越來越大的狀況下，你會發現，JS 的 體積竟然比 HTML 內容還來的大 @@，這樣不是也很奇怪，還會增加 user 瀏覽網頁的負擔。', 6, 'watson', '2015-12-01 15:05:00', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(32, 'JavaScript', 'JavaScript typeof 型別偵測', '因為 JavaScript 的變數在宣告上是無形別的，但是，使用上其實他又是有型別的問題，真的是很麻煩，現在搞懂了，過一陣子沒用，又開始忘記了。所以寫本篇主要是想讓<a href="http://o4u.tw" target="_blank">一條小龍</a>自己紀錄一下，曾經學過的東西，免得又忘記了。', '因為 JavaScript 的變數在宣告上是無形別的，但是，使用上其實他又是有型別的問題，真的是很麻煩，現在搞懂了，過一陣子沒用，又開始忘記了。所以寫本篇主要是想讓<a href="http://o4u.tw" target="_blank">一條小龍</a>自己紀錄一下，曾經學過的東西，免得又忘記了。\r\n\r\nJS 在偵測變數有無定義上一般比較簡單可以用下列方式\r\n[code lang="js"]\r\nvar obj;\r\nif(obj)\r\n   alert("had defined");\r\nelse\r\n   alert("undefined");\r\n[/code]\r\n\r\n但是有些狀況是例外，主要就是 數字型態的變數的偵測，因為數字 0 套用在if 上等同 false，但其實0 也是有定義。\r\n所以可以稍微修正上述程式改為下列方式，下述程式有個地方 讀者，也常搞混，就是 null 跟 undefined 有何不同，其實想想這個問題在 DB 上好像也常有人問...\r\n基本上，null 的意思就是，你還有設定一個值給變數，那個值就是 null，undefined 就是 你宣告一個變數卻沒給任何值。\r\n[code lang="js"]\r\nvar obj;\r\nif (obj == null || typeof (obj) == ''undefined'')\r\n   alert("undefined");\r\nelse\r\n   alert("had defined");\r\n[/code]\r\n\r\n上述，可以看到 typeof 的使用，這個函數 還蠻常使用的，這邊也稍微紀錄一下，常見的型態，要注意的是比較的字串，是有區分大小寫的喔\r\n[code lang="js"]\r\nvar obj;\r\nif (obj == null || typeof (obj) == ''undefined'')\r\n   alert("undefined");\r\nelse if(typeof (obj) == ''string'')\r\n   alert("is string");\r\nelse if(typeof (obj) == ''boolean'')\r\n   alert("is boolean");\r\nelse if(typeof (obj) == ''object'')\r\n   alert("is object");\r\nelse if(typeof (obj) == ''function'')\r\n   alert("is function");\r\n[/code]\r\n\r\n雖然使用上述大部分型態 都能偵測出來，但還是有少部分，會造成困擾，像是 array。而在 array 的偵測上，<a href="http://o4u.tw" target="_blank">一條小龍</a>習慣使用下述方式\r\n[code lang="js"]\r\nvar obj;\r\nif (obj == null || typeof (obj) == ''undefined'')\r\n   alert("undefined");\r\nelse if (obj.length)\r\n   alert("is array");\r\nelse\r\n   alert("is not array");\r\n[/code]\r\n\r\n因為 length 是 array 必有的參數，當然object 也是可以自行定義 length 這個參數，所以這邊有另外一個比較嚴謹的做法\r\n[code lang="js"]\r\nvar obj;\r\nif (obj == null || typeof (obj) == ''undefined'')\r\n   alert("undefined");\r\nelse if (Object.prototype.toString.call(obj) === ''[object Array]'')\r\n   alert("is array");\r\nelse\r\n   alert("is not array");\r\n[/code]', 8, 'watson', '2013-07-23 12:00:00', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(33, 'MVC', 'entity framework left outer join example', '<a href="http://o4u.tw" target="_blank">一條小龍</a>這陣子在研究EF 感覺算是有點晚了，學習中常會不自覺跟 SQL 的寫法來做比較，發現EF Linq 的雖然能大幅簡化語法，尤其是查找方面，但是也相對犧牲一些效能。', '<a href="http://o4u.tw" target="_blank">一條小龍</a>這陣子在研究EF 感覺算是有點晚了，學習中常會不自覺跟 SQL 的寫法來做比較，發現EF Linq 的雖然能大幅簡化語法，尤其是查找方面，但是也相對犧牲一些效能。\r\n\r\n但是他的語法裡面的 left join 跟單純 SQL 比起來算是 Linq 裡面最麻煩的一個寫法。\r\n\r\n\r\n<a href="http://o4u.tw" target="_blank">一條小龍</a> 最近學習心得，稍微來記錄一下，常用的兩種寫法如下所示：\r\n\r\n[csharp]\r\n  Person magnus = new Person { FirstName = "Magnus", LastName = "Hedlund" };\r\n  Person terry = new Person { FirstName = "Terry", LastName = "Adams" };\r\n  Person charlotte = new Person { FirstName = "Charlotte", LastName = "Weiss" };\r\n  Person arlene = new Person { FirstName = "Arlene", LastName = "Huff" };\r\n\r\n Pet barley = new Pet { Name = "Barley", Owner = terry };\r\n  Pet boots = new Pet { Name = "Boots", Owner = terry };\r\n  Pet whiskers = new Pet { Name = "Whiskers", Owner = charlotte };\r\n  Pet bluemoon = new Pet { Name = "Blue Moon", Owner = terry };\r\n Pet daisy = new Pet { Name = "Daisy", Owner = magnus };\r\n\r\n // Create two lists.\r\n  List<Person> people = new List<Person> { magnus, terry, charlotte, arlene };\r\n  List<Pet> pets = new List<Pet> { barley, boots, whiskers, bluemoon, daisy };\r\n\r\n  var query = (from person in people\r\n        join pet in pets on person equals pet.Owner into gj\r\n       from subpet in gj.DefaultIfEmpty()\r\n        select new { person.FirstName, PetName = (subpet == null ? String.Empty : subpet.Name) }).ToList();\r\n\r\n var query2 = people.GroupJoin(pets, a => a, b => b.Owner, (person, pet) => new {person, pet})\r\n     .SelectMany(a => a.pet.DefaultIfEmpty(), (a, subpet) => new\r\n     { \r\n        a.person.FirstName, \r\n        PetName = (subpet == null ? String.Empty : subpet.Name)\r\n     }).ToList();\r\n[/csharp]\r\n\r\n上述寫法的重點就是 DefaultIfEmpty 這個方法，老實說，一條小龍一直不懂 MS 發展這麼久的 EF 為啥基本的 left join 不去簡化一下寫法，硬要繞一圈用各 DefaultIfEmpty 來輸出，感覺很不直覺，因為多了一個 subpet 來使用，明明join 時就已經產生一各 pet(指的是第二個寫法的 pet 或 第一個寫法的 gj) …，讀者可以試試看使用 pet 的結果。\r\n\r\n\r\n最後介紹另一個常用的 left join 不過這個比較適合應用在 toList 之後結果的值重新設定，範例如下：\r\n\r\n[csharp]\r\n var query3 = people\r\n     .Select(a => new { \r\n       a.FirstName,\r\n        pets = pets.Where(b=> b.Owner == a).Select(b => b.Name).ToList()\r\n      }).ToList();\r\n[/csharp]\r\n\r\n\r\n因為 pepole 已經是實體的資料集所以使用上沒問題，但如果 people 對應是 DB Entity 尚未產生實體，那在使用上有時會有問題，就我經驗，原本在 EF 4 使用沒問題，切換到 EF 4.1 就有問題了，所以這個寫法如果應用在 DB Entity 且尚未產生實體會比較危險，所以這時就不建議。', 4, 'watson', '2013-08-30 12:00:00', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(34, 'normal', '台灣往前衝', '從九月從大陸回來台灣，聽我哥講，跑去上 小型企業創新研發計畫 <strong>SBIR </strong> 的說明會以及青輔會的創業輔導班，原先心態從覺得政府的課有啥好上的，應該都蠻無趣的，到現在感覺台灣一片光明，在感動之餘，就來寫這篇文章，推薦各位網友也都可以抽空去聽聽，真的是蠻不錯的。', '從九月從大陸回來台灣，聽我哥講，跑去上 小型企業創新研發計畫 <strong>SBIR </strong> 的說明會以及青輔會的創業輔導班，原先心態從覺得政府的課有啥好上的，應該都蠻無趣的，到現在感覺台灣一片光明，在感動之餘，因為 SBIR 的課場場爆滿，由此可知台灣人的向上心也是很強的。\r\n\r\n所以就來寫這篇文章，一方面推薦、一方面也鼓勵，各位有興趣，現在或未來想創業網友也都可以抽空去聽聽，而且是免費的，真的是蠻不錯的。\r\n\r\n這兩個課，就像我哥說的一樣，不管你未來要不要創業，去聽聽都是有益無害，像是 SBIR 聽完，<a href="http://o4u.tw" target="_blank">一條小龍</a>有聽到一個案例就蠻有趣的，原來毛巾可以摺成像蛋糕的樣子，當成禮品來賣，成功之餘，還可以跟政府申請補助款 100 萬，如果失敗也不需要還款喔，多好阿，聽了以後，真是感覺政府的錢，不去賺，那真是太浪費了，當然現在的我還不行，可是這卻給<a href="http://o4u.tw" target="_blank">一條小龍</a>另一條未來路的方向。\r\n\r\n在來是青輔會的創業輔導班，也讓我學到很多，像是，未來如要創業該準備哪些，政府、銀行有哪些資源可以利用。課程還教導，企業管理的基本知識，行銷的手法，這些既使我還沒要創業，也是體悟很多，我現在走在路上，就會特別去注意 便利商店 各種商店等等，都是如何促銷的，其實，不只是，商店、公司要促銷，個人也是可以促銷的，而不是坐在家中，想等機會從天而降。\r\n\r\n下面 介紹一下，可以利用的資源，大家有空也可以 多去上政府網站，常常會有很多資源、免費課程等等，我門繳哪麼多稅，不去多利用政府資源，不是太對不起自己了：\r\n\r\nSBIR 的課，<a href="http://o4u.tw" target="_blank">一條小龍</a>是在這邊 看到的\r\n<a href="http://ewda.tw" target="_blank">http://ewda.tw</a>\r\n\r\n\r\n然後這邊 有經濟部 對  SBIR 的說明介紹\r\n<a href="http://www.sbir.org.tw/SBIR/Web/Online_intro.aspx" target="_blank">http://www.sbir.org.tw/SBIR/Web/Online_intro.aspx</a>\r\n\r\n\r\n在來是，青輔會的創業輔導班\r\n大家可以上 創業圓夢網，這裡面有很多資源，但是感覺很沒邏輯，亂亂的\r\n\r\n<a href="http://sme.moeasmea.gov.tw/SME/modules.php?name=MyMembers" target="_blank">http://sme.moeasmea.gov.tw/SME/modules.php?name=MyMembers</a>\r\n\r\n<a href="http://www.sbir.org.tw/SBIR/Web/Online_intro.aspx" target="_blank">http://www.sbir.org.tw/SBIR/Web/Online_intro.aspx</a>\r\n\r\n\r\n在來，如未來、現在想要申請青年創業貸款，信用貸款但利率接近房貸利率喔，需要上 21 個小時的課程，如要申請 創業啟動金的人則要上 21+9 個小時的課程，九個小時可為網路線上課程，這些 全為免費課程。\r\n報名網址如下：\r\n<a href="http://bpclass.careernet.org.tw/rigister.php" target="_blank">http://bpclass.careernet.org.tw/rigister.php</a>\r\n\r\n\r\n說起來，政府資源真的很豐富，但是宣傳不夠力，網站也做的很爛，所以才有一堆代辦公司出現，其實只要願意多花點心力，多打電話、多了解，還是都能自己來搞定，據上課老師說，貸款成功率高達 83%，貸款額度最高跟你創業資本額一致，大部分都會打折。', 3, 'watson', '2012-11-02 10:36:25', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(35, 'HTML', '響應式(自適應)網頁介紹', 'CSS media 在現今網站的使用是越來越重要了，早期 CSS3 還不成熟的時代，大家要設計手機跟電腦的網頁的做法，很單純就是設計兩個網站，現在應該也常看到手機板的網站 就是 m.xxx.xxx。', 'CSS media 在現今網站的使用是越來越重要了，早期 CSS3 還不成熟的時代，大家要設計手機跟電腦的網頁的做法，很單純就是設計兩個網站，現在應該也常看到手機板的網站 就是 m.xxx.xxx。\r\n\r\n但是現在手機平板的崛起，各種奇怪的解析度一堆，總不可能每種解析度設計一個網站吧。\r\n\r\n以前認為手機慢，且流量貴等等的問題，所以網站要特別設計成低耗能、低流量等等設計思維，現在都不存在了。因為現今手機性能甚至比很多老電腦的效能還好，既使需要大量 CPU 運算的 JavaScript 也OK。且網路幾乎人人都是3G 4G，所以流量也不是問題。\r\n\r\n以及手機平板網頁也能大方的像電腦一般網頁來設計，但是唯一要考慮的是，手機螢幕小解析度高的問題，螢幕小解析度高 造成在手機上字都特別小。還記得早期 一條小龍 再用手機看網頁，都要不斷的放大縮小，有夠痛苦的。\r\n\r\n因此手機的畫面還是需要特別來設計，但是不用像之前需要特別考量 流量、低運算的問題而已。\r\n\r\n也因此如此，讓大家越來越注意響應式(自適應 Responsive Web Design)網頁的設計方法，其基本思考概念，就是希望設計一個網站，來通吃所有手機、平板、電腦 甚至投影機等等，當然這是理想目標。\r\n\r\n為啥說是理想，因為網站想呈現的東西太多了。所以現今大部分做法的基本概念，就是盡量網頁主體不變，然後換到手機時，把附屬的東西給隱藏起來，主體的字變大。然後附屬的東西改成 button，點該 button 時在顯示出來。\r\n\r\n而要實現上述的概念，最重要的一個東西就是 CSS Media Queries (下面簡稱 media)， media 可以讓我門設計網頁時，標註在某種解析度下使用哪些 CSS。\r\n\r\n其實這個 media 已經從 2012年7月就推出了，大家也一直有想使用，但受限於各種技術問題，直到手機瀏覽器支援 CSS3 越來越成熟，才慢慢被大家廣泛使用。\r\n\r\n雖然現在瀏覽器有比較成熟了，但是還是有蠻多人 在使用早期的瀏覽器。所以在使用 mdeia 前要注意的是，他在早期的瀏覽器並不支援，像是 IE6,7,8 etc。\r\n但是這也不代表，不能使用 media，就只是使用舊 瀏覽器的人，他在看網頁時就不會因為他的解析度來變化畫面而已。\r\n\r\n下面簡單介紹一下，media 的使用方式：\r\n\r\n[html]\r\n@media screen and (min-width: 1200px) {\r\n    // 如果使用者之視窗寬度 >= 1200px，將會再載入這裡的 CSS。\r\n}\r\n\r\n@media screen and (min-width: 768px) and (max-width: 979px) {\r\n    // 如果使用者之視窗寬度介於 768px ~ 979px，將會再載入這裡的 CSS。    \r\n}\r\n\r\n@media screen and (max-width: 767px) {\r\n    // 如果使用者之視窗寬度 <= 768px，將會再載入這裡的 CSS。    \r\n}\r\n\r\n@media screen and (max-device-width: 480px) {\r\n    // 如果使用者之裝置寬度 <= 480px，將會再載入這裡的 CSS。 \r\n}\r\n[/html]\r\n\r\n不過 上述的 screen 指的是一般電腦、智慧手機、平板螢幕，也可在指定成 handheld, projection 等等\r\n但是 一條小龍 是覺得 screen 也是可以不寫，因為 這個在偵測機器種類上，並沒有哪麼的明確。\r\n\r\n一般網站畫面不複雜，像是新聞網站，也可以指定一種解析度來變化就好，不一定需要各種解析度都要去設定。\r\n\r\n而上述的 media 的語法，也可以拆成好幾個 CSS 檔，再依據不同解析度 來載入不同的 CSS 檔\r\n\r\n[html]\r\n<link rel="stylesheet" type="text/css" href="all.css" media="screen">\r\n<link rel="stylesheet" type="text/css" href="a.css" media="screen and (max-width: 767px)">\r\n<link rel="stylesheet" type="text/css" href="b.css" media="screen and (min-width: 768px) and (max-width: 979px)">\r\n<link rel="stylesheet" type="text/css" href="c.css" media="screen and (min-width: 1200px)">\r\n<link rel="stylesheet" type="text/css" href="d.css" media="screen and (max-device-width: 480px)">\r\n[/html]\r\n\r\n再來響應式網頁 一條小龍 會比較喜歡用 em 來取代 px，因為現在的機器螢幕小解析度高的狀況越來越多了，指定 px 也會讓字看起來很小，而且 em 彈性比較大，\r\n原始 1 em = 16 px，然後我門能在一開頭就用下述與法\r\n\r\n[html]\r\nbody { font-size:75% } 。\r\n[/html]\r\n\r\n在動態調整所有的字型大小，而不用一個個 CSS 在去用 media 來指定。\r\n\r\n最後在 響應式網頁的設計，要習慣 使用 DIV，然後再使用 width 的寬度要用 90% 100% 等等，來設計。\r\n\r\n簡單說響應式網頁的設計 就是要用彈性的方式來設計網頁，才能讓網頁更有彈性。\r\n', 10, 'watson', '2015-12-02 11:00:00', NULL, NULL, 'A');
INSERT INTO `Web_Document` VALUES(36, 'JavaScript', 'JavaScript 綁定 Event 及傳遞參數的方法', 'JavaScript 有幾種綁定 Event 的方法，最簡單的就是直接指定 Event。', 'JavaScript 有幾種綁定 Event 的方法，最簡單的就是直接指定 Event。\r\n\r\n如下所示：\r\n[code lang="js"]\r\nvar btn = document.createElement("input");\r\nbtn.onclick = function myClick(){\r\n   alert("had clicked");\r\n }\r\n[/code]\r\n\r\n另一種方法是自製 event 的物件來幫忙傳遞，如下所示，是 <a href="http://o4u.tw">一條小龍</a> 在研發 <a href="http://obj4u.com" target="_blank">oGrid</a> 時的一個附屬產品\r\n[code lang="js"]\r\nvar obj4u = obj4u || {};\r\n\r\nobj4u.EventContorller = function (fcontrol) {\r\n  var control = fcontrol;\r\n\r\n this.AddEvent = function (eventName, eventObject) {\r\n   var event = control[eventName];\r\n   if (control)\r\n      control[eventName] = eventObject;\r\n }\r\n this.removeEvent = function (eventName) {\r\n   control[eventName] = null;\r\n  }\r\n}\r\n[/code]\r\n\r\n使用方法如下：\r\n[code lang="js"]\r\nwindow.onload = function () {\r\n var fdocs = document.getElementById("page_content");\r\n  var btn = new SimpleButton(fdocs, { id: "btnClose", caption: "close" });\r\n  btn.event.AddEvent("onclick", myClick);\r\n}\r\n\r\nfunction myClick(sender){\r\n alert("close clicked");\r\n}\r\n\r\nSimpleButton = function (fcontainer, params) {\r\n  var container = fcontainer;\r\n var obj = this;\r\n var btn = document.createElement("input");\r\n  this.event = new obj4u.EventContorller(btn);\r\n\r\n  btn.type = "button";\r\n  btn.className = "btn";\r\n  if (params) {\r\n   btn.id = params.id;\r\n   btn.value = params.caption;\r\n }\r\n container.appendChild(btn);\r\n}\r\n[/code]\r\n\r\n使用 obj4u.EventContorller 有個好處就是，就是像上述例子中 <a href="http://o4u.tw">一條小龍</a> 封裝了一個 button，使用這種方法就可以直接讓使用者直接使用原生 button 所提供的 event，否則就會變成開發者，要在想辦法來封裝要使用的 event，如下述例子，變的比較麻煩了\r\n\r\n[code lang="js"]\r\nwindow.onload = function () {\r\n var fdocs = document.getElementById("page_content");\r\n  var btn = new SimpleButton(fdocs, { id: "btnClose", caption: "close" });\r\n  btn.onclick = myClick;\r\n}\r\n\r\nfunction myClick(sender){\r\n  alert("close clicked");\r\n}\r\n\r\nSimpleButton = function (fcontainer, params) {\r\n  var container = fcontainer;\r\n var obj = this;\r\n var btn = document.createElement("input");\r\n\r\n  btn.type = "button";\r\n  btn.className = "btn";\r\n  if (params) {\r\n   btn.id = params.id;\r\n   btn.value = params.caption;\r\n }\r\n container.appendChild(btn);\r\n\r\n btn.onclick = function () {\r\n   obj.onclick(obj);\r\n };\r\n  this.onclick = function (sender) {\r\n  };\r\n}\r\n[/code]\r\n\r\n最後是 <a href="http://o4u.tw">一條小龍</a> 最近開發上的心得，就是 event 如何傳遞參數，上述例子，可以看到都沒有 傳遞參數，因為是 直接指定 function 所以是沒辦法傳遞參數的。\r\n如果你像下例 來直接傳遞參數，就會變成你在呼叫 function 了\r\n\r\n[code lang="js"]\r\n  window.onload = function () {\r\n   var fdocs = document.getElementById("page_content");\r\n    var btn = new SimpleButton(fdocs, { id: "btnClose", caption: "close" });\r\n    btn.onclick = myClick(btn, "test");\r\n }\r\n\r\n function myClick(sender, msg){\r\n    alert("close clicked："+msg);\r\n  }\r\n[/code]\r\n\r\n正確的做法是，要在包裝一層 function ，如下例\r\n[code lang="js"]\r\n window.onload = function () {\r\n   var fdocs = document.getElementById("page_content");\r\n    var btn = new SimpleButton(fdocs, { id: "btnClose", caption: "close" });\r\n    btn.onclick = function(sender){ myClick(sender, "test"); }\r\n  }\r\n\r\n function myClick(sender, msg){\r\n    alert("close clicked："+msg);\r\n  }\r\n[/code]\r\n\r\n其實這個技巧，在JavaScript 很常見，最常看人使用的應該就是 Timeout 吧，如下\r\n[code lang="js"]\r\n window.onload = function () {\r\n   setTimeout(function(){ alert("Hello"); }, 3000);\r\n  }\r\n[/code]', 7, 'watson', '2015-12-02 17:00:00', NULL, NULL, 'A');
